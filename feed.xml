<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://jackzh.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jackzh.com/" rel="alternate" type="text/html" /><updated>2019-10-18T13:42:49-04:00</updated><id>https://jackzh.com/feed.xml</id><title type="html">Jun Zheng</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">CSCD58 Computer Networks - Link Layer</title><link href="https://jackzh.com/cscd58/2019/10/17/cscd58-link-layer.html" rel="alternate" type="text/html" title="CSCD58 Computer Networks - Link Layer" /><published>2019-10-17T20:22:00-04:00</published><updated>2019-10-17T20:22:00-04:00</updated><id>https://jackzh.com/cscd58/2019/10/17/cscd58-link-layer</id><content type="html" xml:base="https://jackzh.com/cscd58/2019/10/17/cscd58-link-layer.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;How do we send messages across a wire?&lt;/p&gt;

&lt;p&gt;Hosts and routers are called &lt;em&gt;nodes&lt;/em&gt;, and the communication path are called &lt;em&gt;links&lt;/em&gt;. A frame encapsulates the datagram and sends the data through a link.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Application
Presentation
Session
Transport
Network
Data Link       &amp;lt;- Network cards etc.
Physical        &amp;lt;- Ethernet cables, wireless signals
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;data link&lt;/em&gt; layer is responsible for transferring datagram from one node to physically adjacent node over a physical link.&lt;/p&gt;

&lt;p&gt;A datagram maybe transferred to final destination using many different links, and they may have different protocols. &lt;em&gt;Routing algorithm&lt;/em&gt; decides which path to take to get the datagram to final destination.&lt;/p&gt;

&lt;h2 id=&quot;common-link-layer-services&quot;&gt;Common Link Layer Services&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: link layers may provide more services, these are just examples.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;framing&quot;&gt;Framing&lt;/h3&gt;

&lt;p&gt;Encapsulate datagram into frames, adding header, trailer (for example addresses and error-correction bits).&lt;/p&gt;

&lt;h3 id=&quot;link-access&quot;&gt;Link Access&lt;/h3&gt;

&lt;p&gt;Allows upper layers to access links, channel if shared medium.&lt;/p&gt;

&lt;p&gt;MAC (Media Access Control) address is used to identify source, destination. This address uniquely identifies each device on a network.&lt;/p&gt;

&lt;h3 id=&quot;reliable-delivery&quot;&gt;Reliable Delivery&lt;/h3&gt;

&lt;p&gt;Usually error correction is not implemented on low error links (fiber, some twisted pairs).&lt;/p&gt;

&lt;p&gt;But wireless has high error-rate, so error correction is implemented on link layer.&lt;/p&gt;

&lt;h2 id=&quot;common-physical-media&quot;&gt;Common Physical Media&lt;/h2&gt;

&lt;h3 id=&quot;twisted-pairs&quot;&gt;Twisted Pairs&lt;/h3&gt;

&lt;p&gt;Usually max 100m.&lt;/p&gt;

&lt;p&gt;CAT5 (most common), supports up to Gigabit ethernet.&lt;/p&gt;

&lt;p&gt;CAT6, 6a, 7 can support 10Gbps, 40Gbps, 100Gbps.&lt;/p&gt;

&lt;h3 id=&quot;coaxial-cable&quot;&gt;Coaxial Cable&lt;/h3&gt;

&lt;p&gt;Usually max 200m.&lt;/p&gt;

&lt;p&gt;But very slow, usually just 10Mbps (why would anyone use this???).&lt;/p&gt;

&lt;h3 id=&quot;fibre-optic-cables&quot;&gt;Fibre Optic Cables&lt;/h3&gt;

&lt;h4 id=&quot;single-mode&quot;&gt;Single-Mode&lt;/h4&gt;

&lt;p&gt;Very narrow core. 10um, light can’t even bounce around within the core.&lt;/p&gt;

&lt;p&gt;Used with lasers for long distances (100km).&lt;/p&gt;

&lt;h4 id=&quot;multi-mode&quot;&gt;Multi-Mode&lt;/h4&gt;

&lt;p&gt;Light can bounce within the core (50um). Used with LEDs for shorter distances, cannot go longer because modal dispersion.&lt;/p&gt;

&lt;h3 id=&quot;fiber&quot;&gt;Fiber&lt;/h3&gt;

&lt;p&gt;Long, thin, pure strand of glass.&lt;/p&gt;

&lt;p&gt;Light propogated through internal reflection, huge bandwidth, can reach 100 petabits/kilometer/sec (Bell Labs).&lt;/p&gt;

&lt;h3 id=&quot;wireless&quot;&gt;Wireless&lt;/h3&gt;

&lt;p&gt;Different frequencies have different properties, and are subject to environmental effects.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Signals decrease as it propogates through matter.&lt;/li&gt;
  &lt;li&gt;Other sources can interfere (for example 2.4Ghz, worst garbage ever).&lt;/li&gt;
  &lt;li&gt;Multipath propogation, signal reflects off objects, so they can arrive at destination at slightly different times.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bandwidth-of-a-channel&quot;&gt;Bandwidth of a Channel&lt;/h2&gt;

&lt;p&gt;There are two main definitions of bandwidths:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;B, in Hz, is the width of the pass-band in the frequency domain&lt;/li&gt;
  &lt;li&gt;bps, is the information carrying capacity of the channel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are related to noise, noise limits how many signal levels can we safely distinguish.&lt;/p&gt;

&lt;h2 id=&quot;encoding-bits&quot;&gt;Encoding Bits&lt;/h2&gt;

&lt;p&gt;Generate analog waveform from transmitter and sample at receiver.&lt;/p&gt;

&lt;p&gt;Signal transition rate = Baud rate / Versus bit rate&lt;/p&gt;

&lt;h3 id=&quot;nrz&quot;&gt;NRZ&lt;/h3&gt;

&lt;p&gt;Simplest encoding, Non-Return to Zero. High = 1, Low = 0.&lt;/p&gt;

&lt;h3 id=&quot;nrzi&quot;&gt;NRZI&lt;/h3&gt;

&lt;p&gt;Transition for 1s, no transition for 0s.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/zAXrdUb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;clock-recovery&quot;&gt;Clock Recovery&lt;/h2&gt;

&lt;p&gt;How can we distinguish consecutive 0s or 1s?&lt;/p&gt;

&lt;p&gt;Sender and receivers won’t always have the same clock&lt;/p&gt;

&lt;p&gt;There are a few solutions to this problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Send a seperate clock signal -&amp;gt; Expensive&lt;/li&gt;
  &lt;li&gt;Keep messages short -&amp;gt; Limits data rate&lt;/li&gt;
  &lt;li&gt;Embed clock signal in data signal&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;manchester-coding&quot;&gt;Manchester Coding&lt;/h3&gt;

&lt;p&gt;Make transition in the middle of every bit period.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Low-to-High is 0, High-to-Low is 1.&lt;/li&gt;
  &lt;li&gt;Used in 10Mbps ethernet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is self-clocking, XOR of NRZ encoding. However it has 50% efficiency.&lt;/p&gt;

&lt;h3 id=&quot;4b5b-codes&quot;&gt;4B/5B Codes&lt;/h3&gt;

&lt;p&gt;Maps 4 bits to 5 bits, and ensures never 3 consecutive 0s back-to-back. 80% efficiency.&lt;/p&gt;

&lt;p&gt;Used in LANs (FDDI, 100Mbps ethernet).&lt;/p&gt;</content><author><name></name></author><category term="cscd58" /><category term="cscd58" /><category term="course-notes" /><summary type="html">Introduction How do we send messages across a wire? Hosts and routers are called nodes, and the communication path are called links. A frame encapsulates the datagram and sends the data through a link. Application Presentation Session Transport Network Data Link &amp;lt;- Network cards etc. Physical &amp;lt;- Ethernet cables, wireless signals The data link layer is responsible for transferring datagram from one node to physically adjacent node over a physical link. A datagram maybe transferred to final destination using many different links, and they may have different protocols. Routing algorithm decides which path to take to get the datagram to final destination. Common Link Layer Services Note: link layers may provide more services, these are just examples. Framing Encapsulate datagram into frames, adding header, trailer (for example addresses and error-correction bits). Link Access Allows upper layers to access links, channel if shared medium. MAC (Media Access Control) address is used to identify source, destination. This address uniquely identifies each device on a network. Reliable Delivery Usually error correction is not implemented on low error links (fiber, some twisted pairs). But wireless has high error-rate, so error correction is implemented on link layer. Common Physical Media Twisted Pairs Usually max 100m. CAT5 (most common), supports up to Gigabit ethernet. CAT6, 6a, 7 can support 10Gbps, 40Gbps, 100Gbps. Coaxial Cable Usually max 200m. But very slow, usually just 10Mbps (why would anyone use this???). Fibre Optic Cables Single-Mode Very narrow core. 10um, light can’t even bounce around within the core. Used with lasers for long distances (100km). Multi-Mode Light can bounce within the core (50um). Used with LEDs for shorter distances, cannot go longer because modal dispersion. Fiber Long, thin, pure strand of glass. Light propogated through internal reflection, huge bandwidth, can reach 100 petabits/kilometer/sec (Bell Labs). Wireless Different frequencies have different properties, and are subject to environmental effects. Signals decrease as it propogates through matter. Other sources can interfere (for example 2.4Ghz, worst garbage ever). Multipath propogation, signal reflects off objects, so they can arrive at destination at slightly different times. Bandwidth of a Channel There are two main definitions of bandwidths: B, in Hz, is the width of the pass-band in the frequency domain bps, is the information carrying capacity of the channel They are related to noise, noise limits how many signal levels can we safely distinguish. Encoding Bits Generate analog waveform from transmitter and sample at receiver. Signal transition rate = Baud rate / Versus bit rate NRZ Simplest encoding, Non-Return to Zero. High = 1, Low = 0. NRZI Transition for 1s, no transition for 0s. Clock Recovery How can we distinguish consecutive 0s or 1s? Sender and receivers won’t always have the same clock There are a few solutions to this problem: Send a seperate clock signal -&amp;gt; Expensive Keep messages short -&amp;gt; Limits data rate Embed clock signal in data signal Manchester Coding Make transition in the middle of every bit period. Low-to-High is 0, High-to-Low is 1. Used in 10Mbps ethernet. It is self-clocking, XOR of NRZ encoding. However it has 50% efficiency. 4B/5B Codes Maps 4 bits to 5 bits, and ensures never 3 consecutive 0s back-to-back. 80% efficiency. Used in LANs (FDDI, 100Mbps ethernet).</summary></entry><entry><title type="html">CSCB63 Data Structure Design and Analysis - Fibonacci Heaps</title><link href="https://jackzh.com/cscb63/2019/03/12/cscb63-fib-heap.html" rel="alternate" type="text/html" title="CSCB63 Data Structure Design and Analysis - Fibonacci Heaps" /><published>2019-03-12T13:00:00-04:00</published><updated>2019-03-12T13:00:00-04:00</updated><id>https://jackzh.com/cscb63/2019/03/12/cscb63-fib-heap</id><content type="html" xml:base="https://jackzh.com/cscb63/2019/03/12/cscb63-fib-heap.html">&lt;p&gt;Basic introduction to fibonacci heaps and some comparson with regular heaps.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;operations-supported&quot;&gt;Operations Supported&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make_heap&lt;/code&gt; - Create a new heap.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insert(H, x)&lt;/code&gt; - Insert &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; into heap &lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;min(H)&lt;/code&gt; - Return minimum element in &lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;extract_min(H)&lt;/code&gt; - Return minimum element in &lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt; and removes it.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;union(H1, H2)&lt;/code&gt; - Creates and returns a new heap containing all elements in &lt;code class=&quot;highlighter-rouge&quot;&gt;H1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;H2&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;decrease_key(H, x, k)&lt;/code&gt; - Assigns &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt; a new key &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; must be less then the current key.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;delete(H, x)&lt;/code&gt; - Delete element &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; from heap &lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;complexity-comparsions-with-binary-heaps&quot;&gt;Complexity Comparsions With Binary-Heaps&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Binary Heap Worse-Case&lt;/th&gt;
      &lt;th&gt;Fib-Heap Amortized&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;insert&lt;/td&gt;
      &lt;td&gt;$\Theta(lgn)$&lt;/td&gt;
      &lt;td&gt;$\Theta(1)$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;extract-min&lt;/td&gt;
      &lt;td&gt;$\Theta(lgn)$&lt;/td&gt;
      &lt;td&gt;$O(lgn)$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;decrease-priority&lt;/td&gt;
      &lt;td&gt;$\Theta(lgn)$&lt;/td&gt;
      &lt;td&gt;$\Theta(1)$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;union&lt;/td&gt;
      &lt;td&gt;$\Theta(n)$&lt;/td&gt;
      &lt;td&gt;$\Theta(1)$&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;structure&quot;&gt;Structure&lt;/h2&gt;

&lt;p&gt;A fibonnacci heap includes the following components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A forest of heap-ordered trees.&lt;/li&gt;
  &lt;li&gt;Roots of these trees are stored in a circular doubly-linked list.&lt;/li&gt;
  &lt;li&gt;Pointer to minimum root, and total number of nodes.&lt;/li&gt;
  &lt;li&gt;Siblings in a circular doubly-linked list, parent only knows one child.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deg(x)&lt;/code&gt; is number of children is &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;’s child list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.evernote.com/l/Aq1GyqY27zVE5YwiM4e_BM9NY38465L1RhEB/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For each node, it contains following fields:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;key: Priority&lt;/li&gt;
  &lt;li&gt;left, right, parent: Pointers&lt;/li&gt;
  &lt;li&gt;child: Pointer to one child&lt;/li&gt;
  &lt;li&gt;degree: Num of children&lt;/li&gt;
  &lt;li&gt;mark: Boolean, useful for &lt;code class=&quot;highlighter-rouge&quot;&gt;decrease-priority&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;operations&quot;&gt;Operations&lt;/h2&gt;

&lt;h3 id=&quot;insert&quot;&gt;Insert&lt;/h3&gt;

&lt;p&gt;Insert is very simple, you simply insert into the root linked-list. This takes $O(1)$.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;insert(H, x) {
    node = new Node(x);
    node.marked = false;
    // Insert right after H.min
    node.right = H.min.right;
    node.left = H.min;
    H.min.right = node;
    node.right.left = node;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;union&quot;&gt;Union&lt;/h3&gt;

&lt;p&gt;Just merge two root lists and it is done. This also takes $O(1)$.&lt;/p&gt;

&lt;p&gt;Of course if you want to make a copy this takes longer.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;union(H1, H2) {
    connect H1.min and H2.min
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="cscb63" /><category term="cscb63" /><category term="course-notes" /><summary type="html">Basic introduction to fibonacci heaps and some comparson with regular heaps.</summary></entry><entry><title type="html">CSCC69 Operating Systems - Threads</title><link href="https://jackzh.com/cscc69/2019/02/13/cscc69-threads.html" rel="alternate" type="text/html" title="CSCC69 Operating Systems - Threads" /><published>2019-02-13T12:50:00-05:00</published><updated>2019-02-13T12:50:00-05:00</updated><id>https://jackzh.com/cscc69/2019/02/13/cscc69-threads</id><content type="html" xml:base="https://jackzh.com/cscc69/2019/02/13/cscc69-threads.html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Threads are basically mini-processes within a process. However they share the same address space.&lt;/p&gt;

&lt;p&gt;Creating threads are much faster than creating processes, in some systems, this can be 10x to 100x faster.&lt;/p&gt;

&lt;p&gt;Think of threads as JS event loops, basically it.&lt;/p&gt;

&lt;h2 id=&quot;classic-thread-model&quot;&gt;Classic Thread Model&lt;/h2&gt;

&lt;p&gt;The classic thread model basically have all threads with their own stack and own PC.&lt;/p&gt;

&lt;p&gt;Everything else is shared. The software library will take care of scheduling.&lt;/p&gt;

&lt;h2 id=&quot;posix-thread-standard&quot;&gt;POSIX Thread Standard&lt;/h2&gt;

&lt;p&gt;Some useful calls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pthread_create: New thread&lt;/li&gt;
  &lt;li&gt;pthread_exit: Quite the calling thread&lt;/li&gt;
  &lt;li&gt;pthread_join: Wait for a thread to exit&lt;/li&gt;
  &lt;li&gt;pthread_yield: Give up CPU for another thread&lt;/li&gt;
  &lt;li&gt;pthread_attr_init: Create a thread attribute structure&lt;/li&gt;
  &lt;li&gt;pthread_attr_destroy: Remove a thread’s attribute structure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;user-space-thread-implementation&quot;&gt;User Space Thread Implementation&lt;/h2&gt;

&lt;p&gt;If implemented in user space, then the library have to take care of scheduling and switching. However if hardware do support store/load registers, this operation can be done very quickly, which is much faster than trapping to kernel.&lt;/p&gt;

&lt;p&gt;And since everything is local, no context switch is needed, no kernel calls, it is very fast. Each process can also have its own scheduling algorithm.&lt;/p&gt;

&lt;h3 id=&quot;drawbacks&quot;&gt;Drawbacks&lt;/h3&gt;

&lt;p&gt;Thread cannot make blocking kernel calls, since that will halt all threads. Sometimes library will wrap the actual system call, but it is not really that nice to do.&lt;/p&gt;

&lt;p&gt;Another issue is page fault. Which will be discussed in memory management (basically blocking the process because it needs to read instructions from disk).&lt;/p&gt;

&lt;p&gt;In user space thread implementations, there is no clock interrupts. So a thread must give up the CPU before another thread can be run.&lt;/p&gt;

&lt;h2 id=&quot;kernel-space-thread-implementation&quot;&gt;Kernel Space Thread Implementation&lt;/h2&gt;</content><author><name></name></author><category term="cscc69" /><category term="cscc69" /><category term="course-notes" /><summary type="html">Overview Threads are basically mini-processes within a process. However they share the same address space. Creating threads are much faster than creating processes, in some systems, this can be 10x to 100x faster. Think of threads as JS event loops, basically it. Classic Thread Model The classic thread model basically have all threads with their own stack and own PC. Everything else is shared. The software library will take care of scheduling. POSIX Thread Standard Some useful calls: pthread_create: New thread pthread_exit: Quite the calling thread pthread_join: Wait for a thread to exit pthread_yield: Give up CPU for another thread pthread_attr_init: Create a thread attribute structure pthread_attr_destroy: Remove a thread’s attribute structure User Space Thread Implementation If implemented in user space, then the library have to take care of scheduling and switching. However if hardware do support store/load registers, this operation can be done very quickly, which is much faster than trapping to kernel. And since everything is local, no context switch is needed, no kernel calls, it is very fast. Each process can also have its own scheduling algorithm. Drawbacks Thread cannot make blocking kernel calls, since that will halt all threads. Sometimes library will wrap the actual system call, but it is not really that nice to do. Another issue is page fault. Which will be discussed in memory management (basically blocking the process because it needs to read instructions from disk). In user space thread implementations, there is no clock interrupts. So a thread must give up the CPU before another thread can be run. Kernel Space Thread Implementation</summary></entry><entry><title type="html">CSCC69 Operating Systems - Processes</title><link href="https://jackzh.com/cscc69/2019/02/13/cscc69-processes.html" rel="alternate" type="text/html" title="CSCC69 Operating Systems - Processes" /><published>2019-02-13T09:54:00-05:00</published><updated>2019-02-13T09:54:00-05:00</updated><id>https://jackzh.com/cscc69/2019/02/13/cscc69-processes</id><content type="html" xml:base="https://jackzh.com/cscc69/2019/02/13/cscc69-processes.html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Processes allows computers to do multiple things at once.&lt;/p&gt;

&lt;p&gt;In multiprogramming system, CPU switches from process to process very quickly, make it seem that it is running them concurrently. This is usually called pseudoparallelism, in contrast to real-parallelism with multiprocessor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In any given instant, only one process is running on one CPU.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Context Switch&lt;/em&gt;: a context switch is the process of storing the state of a process or of a thread so that it can be restored and resumed later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;drawbacks&quot;&gt;Drawbacks&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Programs cannot have assumption of timing. Say if you know 1 loop takes 0.01 millisec, you loop 1000 times to get 10 millisec. However, while in the loop, OS might already switched to another process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;program-vs-process&quot;&gt;Program vs Process&lt;/h2&gt;

&lt;p&gt;An analogy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Recepe: Program&lt;/li&gt;
  &lt;li&gt;Ingredients: Input Data&lt;/li&gt;
  &lt;li&gt;Process: Reading the recepe, getting ingredients and baking the cake.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the guy’s son runs into room and says he has been stung by a bee. The guy records where he was in the recipe, gets first aid book and following that. After first aid has been done, he goes back to cooking. This is basically how OS switches processes.&lt;/p&gt;

&lt;p&gt;In real OS this is called scheduling. And if a programming is running twice, it is two processes.&lt;/p&gt;

&lt;h2 id=&quot;process-creation&quot;&gt;Process Creation&lt;/h2&gt;

&lt;p&gt;There are 4 principal events that cause processes to be created:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;System initialization&lt;/li&gt;
  &lt;li&gt;Execution of a process creation system call by a running process&lt;/li&gt;
  &lt;li&gt;A user request to create a new process&lt;/li&gt;
  &lt;li&gt;Initiation of a batch job&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are 2 main types: foreground and background (daemons).&lt;/p&gt;

&lt;p&gt;Technically, for all these cases, a new process is created by an existing process. In UNIX, only &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt; can be used to create new processes. After fork, the child may change its memory image using &lt;code class=&quot;highlighter-rouge&quot;&gt;execve&lt;/code&gt;. Reason is so we can redirect IO before &lt;code class=&quot;highlighter-rouge&quot;&gt;execve&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Parent and child have different address space. However they may share text.&lt;/p&gt;

&lt;h2 id=&quot;process-termination&quot;&gt;Process Termination&lt;/h2&gt;

&lt;p&gt;There are 4 ways for a process to terminate.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Normal exit&lt;/li&gt;
  &lt;li&gt;Error exit&lt;/li&gt;
  &lt;li&gt;Fatal error&lt;/li&gt;
  &lt;li&gt;Killed by another process&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process-hierarchies&quot;&gt;Process Hierarchies&lt;/h2&gt;

&lt;p&gt;In UNIX, a process and all of its children form a process group. When a user sends a signal from the keyboard, all members are notified.&lt;/p&gt;

&lt;p&gt;In UNIX, all processes belong to a single tree, which &lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt; at the root. Processes cannot change parent (unless parent is killed by some reason).&lt;/p&gt;

&lt;h2 id=&quot;process-states&quot;&gt;Process States&lt;/h2&gt;

&lt;p&gt;There are 3 main states:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Running: Actually using the CPU&lt;/li&gt;
  &lt;li&gt;Ready: Can run, but temp stopped for another process to run&lt;/li&gt;
  &lt;li&gt;Blocked: Cannot run until some external event happens&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In UNIX, a process is automatically blocked if trying to read from an empty pipe.&lt;/p&gt;

&lt;h2 id=&quot;process-implementation&quot;&gt;Process Implementation&lt;/h2&gt;

&lt;p&gt;People use process table (PCB) to implement processes. Usually a table includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;State&lt;/li&gt;
  &lt;li&gt;Memory allocation&lt;/li&gt;
  &lt;li&gt;Open files&lt;/li&gt;
  &lt;li&gt;Scheduling info&lt;/li&gt;
  &lt;li&gt;Registers&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;interrupt-vector&quot;&gt;Interrupt Vector&lt;/h3&gt;

&lt;p&gt;Usually located at the bottom of the memory, when an interrupt happens, the hardware pushes process info onto stack, and jumps to interrupt vector. Then the interrupt procedure runs.&lt;/p&gt;

&lt;p&gt;All interrupts start by saving registers, this is usually done in assembly since C cannot access these information. Then the access is handed over to interrupt handler (stack is also reset).&lt;/p&gt;

&lt;p&gt;After the handler is done, the control is back to assembly to load the registers again.&lt;/p&gt;

&lt;p&gt;Overview of the basic procedures are listed below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hardware stacks basic program information&lt;/li&gt;
  &lt;li&gt;Hardware loads PC from IV.&lt;/li&gt;
  &lt;li&gt;Assembly saves registers&lt;/li&gt;
  &lt;li&gt;Assembly set up new stack.&lt;/li&gt;
  &lt;li&gt;Runs C interrupt service.&lt;/li&gt;
  &lt;li&gt;Scheduler decides which to run next.&lt;/li&gt;
  &lt;li&gt;C procedure returns to assembly code.&lt;/li&gt;
  &lt;li&gt;Assembly runs new process.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="cscc69" /><category term="cscc69" /><category term="course-notes" /><summary type="html">Overview Processes allows computers to do multiple things at once. In multiprogramming system, CPU switches from process to process very quickly, make it seem that it is running them concurrently. This is usually called pseudoparallelism, in contrast to real-parallelism with multiprocessor. In any given instant, only one process is running on one CPU. Context Switch: a context switch is the process of storing the state of a process or of a thread so that it can be restored and resumed later. Drawbacks Programs cannot have assumption of timing. Say if you know 1 loop takes 0.01 millisec, you loop 1000 times to get 10 millisec. However, while in the loop, OS might already switched to another process. Program vs Process An analogy: Recepe: Program Ingredients: Input Data Process: Reading the recepe, getting ingredients and baking the cake. Now the guy’s son runs into room and says he has been stung by a bee. The guy records where he was in the recipe, gets first aid book and following that. After first aid has been done, he goes back to cooking. This is basically how OS switches processes. In real OS this is called scheduling. And if a programming is running twice, it is two processes. Process Creation There are 4 principal events that cause processes to be created: System initialization Execution of a process creation system call by a running process A user request to create a new process Initiation of a batch job There are 2 main types: foreground and background (daemons). Technically, for all these cases, a new process is created by an existing process. In UNIX, only fork can be used to create new processes. After fork, the child may change its memory image using execve. Reason is so we can redirect IO before execve. Parent and child have different address space. However they may share text. Process Termination There are 4 ways for a process to terminate. Normal exit Error exit Fatal error Killed by another process Process Hierarchies In UNIX, a process and all of its children form a process group. When a user sends a signal from the keyboard, all members are notified. In UNIX, all processes belong to a single tree, which init at the root. Processes cannot change parent (unless parent is killed by some reason). Process States There are 3 main states: Running: Actually using the CPU Ready: Can run, but temp stopped for another process to run Blocked: Cannot run until some external event happens In UNIX, a process is automatically blocked if trying to read from an empty pipe. Process Implementation People use process table (PCB) to implement processes. Usually a table includes: State Memory allocation Open files Scheduling info Registers etc. Interrupt Vector Usually located at the bottom of the memory, when an interrupt happens, the hardware pushes process info onto stack, and jumps to interrupt vector. Then the interrupt procedure runs. All interrupts start by saving registers, this is usually done in assembly since C cannot access these information. Then the access is handed over to interrupt handler (stack is also reset). After the handler is done, the control is back to assembly to load the registers again. Overview of the basic procedures are listed below: Hardware stacks basic program information Hardware loads PC from IV. Assembly saves registers Assembly set up new stack. Runs C interrupt service. Scheduler decides which to run next. C procedure returns to assembly code. Assembly runs new process.</summary></entry><entry><title type="html">CSCB63 Data Structure Design and Analysis - Balanced Trees</title><link href="https://jackzh.com/cscb63/2019/01/14/cscb63-balanced-trees.html" rel="alternate" type="text/html" title="CSCB63 Data Structure Design and Analysis - Balanced Trees" /><published>2019-01-14T12:13:00-05:00</published><updated>2019-01-14T12:13:00-05:00</updated><id>https://jackzh.com/cscb63/2019/01/14/cscb63-balanced-trees</id><content type="html" xml:base="https://jackzh.com/cscb63/2019/01/14/cscb63-balanced-trees.html">&lt;h2 id=&quot;why-balanced-trees&quot;&gt;Why balanced trees?&lt;/h2&gt;

&lt;p&gt;Binary tree: $O(n)$ for &lt;code class=&quot;highlighter-rouge&quot;&gt;insert&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;search&lt;/code&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Some better trees:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;AVL Trees&lt;/li&gt;
  &lt;li&gt;B-trees&lt;/li&gt;
  &lt;li&gt;Splay trees&lt;/li&gt;
  &lt;li&gt;Weight …&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;avl-trees&quot;&gt;AVL Trees&lt;/h2&gt;

&lt;p&gt;Similar to binary search tree. But also different in a few ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The height of an AVL tree is $O(log n)$.&lt;/li&gt;
  &lt;li&gt;Each internal node has a balance property equal to -1, 0, 1.&lt;/li&gt;
  &lt;li&gt;Balance value = height of the left subtree - height of the right sub tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;balance-property&quot;&gt;Balance Property&lt;/h3&gt;

&lt;p&gt;Have to store the height of sub-trees.&lt;/p&gt;

&lt;p&gt;-1 - Right heavy, +1 - Left heavy, 0 - Balanced.&lt;/p&gt;

&lt;h3 id=&quot;searching&quot;&gt;Searching&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Same as BST&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;insertion&quot;&gt;Insertion&lt;/h3&gt;

&lt;p&gt;After insert, if a node’s balance factor is not -1, 0 or +1, we have to do one single rotation to fix it.&lt;/p&gt;

&lt;p&gt;If there is a “bent”, then we have to do double rotation&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (X = parent(Z); X != null; X = parent(Z)) { // Loop (possibly up to the root)
    // BalanceFactor(X) has to be updated:
    if (Z == right_child(X)) { // The right subtree increases
        if (BalanceFactor(X) &amp;gt; 0) { // X is right-heavy
            // ===&amp;gt; the temporary BalanceFactor(X) == +2
            // ===&amp;gt; rebalancing is required.
            G = parent(X); // Save parent of X around rotations
            if (BalanceFactor(Z) &amp;lt; 0)      // Right Left Case     (see figure 5)
                N = rotate_RightLeft(X, Z); // Double rotation: Right(Z) then Left(X)
            else                           // Right Right Case    (see figure 4)
                N = rotate_Left(X, Z);     // Single rotation Left(X)
            // After rotation adapt parent link
        } else {
            if (BalanceFactor(X) &amp;lt; 0) {
                BalanceFactor(X) = 0; // Z’s height increase is absorbed at X.
                break; // Leave the loop
            }
            BalanceFactor(X) = +1;
            Z = X; // Height(Z) increases by 1
            continue;
        }
    } else { // Z == left_child(X): the left subtree increases
        if (BalanceFactor(X) &amp;lt; 0) { // X is left-heavy
            // ===&amp;gt; the temporary BalanceFactor(X) == –2
            // ===&amp;gt; rebalancing is required.
            G = parent(X); // Save parent of X around rotations
            if (BalanceFactor(Z) &amp;gt; 0)      // Left Right Case
                N = rotate_LeftRight(X, Z); // Double rotation: Left(Z) then Right(X)
            else                           // Left Left Case
                N = rotate_Right(X, Z);    // Single rotation Right(X)
            // After rotation adapt parent link
        } else {
            if (BalanceFactor(X) &amp;gt; 0) {
                BalanceFactor(X) = 0; // Z’s height increase is absorbed at X.
                break; // Leave the loop
            }
            BalanceFactor(X) = –1;
            Z = X; // Height(Z) increases by 1
            continue;
        }
    }
    // After a rotation adapt parent link:
    // N is the new root of the rotated subtree
    // Height does not change: Height(N) == old Height(X)
    parent(N) = G;
    if (G != null) {
        if (X == left_child(G))
            left_child(G) = N;
        else
            right_child(G) = N;
        break;
    } else {
        tree-&amp;gt;root = N; // N is the new root of the total tree
        break;
    }
    // There is no fall thru, only break; or continue;
}
// Unless loop is left via break, the height of the total tree increases by 1.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;deletion&quot;&gt;Deletion&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;If the key is a leaf, delete and rebalance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tree-height&quot;&gt;Tree Height&lt;/h3&gt;

&lt;p&gt;Maximum possible height is $log(n)$, if we have $n$ nodes.&lt;/p&gt;

&lt;p&gt;If the height is $h$, let &lt;code class=&quot;highlighter-rouge&quot;&gt;minsize(h)&lt;/code&gt; be the minimum number of nodes for an AVL tree of height $h$.&lt;/p&gt;

&lt;p&gt;Then&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;minsize(0) = 0,
minsize(1) = 1,
minsize(h + 2) = 1 + minsize(h + 1) + minsize(h)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;minsize(h) = fib(h+2) - 1 (why?)&lt;/p&gt;</content><author><name></name></author><category term="cscb63" /><category term="cscb63" /><category term="course-notes" /><summary type="html">Why balanced trees? Binary tree: $O(n)$ for insert, delete and search.</summary></entry><entry><title type="html">CSCB63 Data Structure Design and Analysis - Complexity</title><link href="https://jackzh.com/cscb63/2019/01/14/cscb63-complexity.html" rel="alternate" type="text/html" title="CSCB63 Data Structure Design and Analysis - Complexity" /><published>2019-01-14T09:13:00-05:00</published><updated>2019-01-14T09:13:00-05:00</updated><id>https://jackzh.com/cscb63/2019/01/14/cscb63-complexity</id><content type="html" xml:base="https://jackzh.com/cscb63/2019/01/14/cscb63-complexity.html">&lt;p&gt;Notes takes for complexity module of CSCB63 course at UTSC.&lt;/p&gt;

&lt;h2 id=&quot;ordered-dictionary&quot;&gt;Ordered Dictionary&lt;/h2&gt;

&lt;p&gt;Finite map from keys to values, assume keys are comparable.&lt;/p&gt;

&lt;p&gt;Some operations supported:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;insert(k, v)&lt;/li&gt;
  &lt;li&gt;lookup(k)&lt;/li&gt;
  &lt;li&gt;delete(k)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ordered set is the same, just with no values, only keys.&lt;/p&gt;

&lt;p&gt;If we implement this using a binary tree, lookup can be very slow if we insert all data within sorted order. We will learn how to improve this.&lt;/p&gt;

&lt;h2 id=&quot;hashed-dictionary--table&quot;&gt;Hashed Dictionary / Table&lt;/h2&gt;

&lt;p&gt;Finite map from keys to values, assume keys can be hashed.&lt;/p&gt;

&lt;p&gt;Same operations as ordered dictionaries.&lt;/p&gt;

&lt;p&gt;Hashed set is the same, just with no values, only keys.&lt;/p&gt;

&lt;p&gt;Hash table is an array of size $L$, put key $k$ in $A[h(k) \% L]$&lt;/p&gt;

&lt;p&gt;We will learn how to choose the hash function, and what to do if there is a collision.&lt;/p&gt;

&lt;h2 id=&quot;priority-queue&quot;&gt;Priority Queue&lt;/h2&gt;

&lt;p&gt;Collection of priority-job pairs, priority is comparable.&lt;/p&gt;

&lt;p&gt;Operations supported:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;insert(p, j)&lt;/li&gt;
  &lt;li&gt;max()&lt;/li&gt;
  &lt;li&gt;extract-max()&lt;/li&gt;
  &lt;li&gt;increase-priority(j, k)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using heap to implement this can be super fast and easy.&lt;/p&gt;

&lt;h2 id=&quot;graph&quot;&gt;Graph&lt;/h2&gt;

&lt;p&gt;Includes vertices and edges.&lt;/p&gt;

&lt;p&gt;Will learn how to compute reachability, cycles, connected components, and spanning tree/forest.&lt;/p&gt;

&lt;h2 id=&quot;disjoint-sets&quot;&gt;Disjoint Sets&lt;/h2&gt;

&lt;p&gt;Collection of disjoint sets.&lt;/p&gt;

&lt;p&gt;Operations supported:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;make-set(x)&lt;/li&gt;
  &lt;li&gt;union(S, S’)&lt;/li&gt;
  &lt;li&gt;find(x)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we implement this using trees, amortized time can be almost constant.&lt;/p&gt;

&lt;h2 id=&quot;amortized-time-analysis&quot;&gt;Amortized Time Analysis&lt;/h2&gt;

&lt;p&gt;Some operations might be slow in the worst case, but rarely happens. We might not be interesting in only the worst case.&lt;/p&gt;

&lt;p&gt;$at = \frac{\text{total time of calls}}{\# calls}$&lt;/p&gt;

&lt;h2 id=&quot;useful-manipulations&quot;&gt;Useful Manipulations&lt;/h2&gt;

&lt;!--more--&gt;

&lt;p&gt;$log_b(x) = log_b(a) * log_a(x)$&lt;/p&gt;

&lt;p&gt;$lim_{n \to \infty} \frac{2^{3n}}{2^n} = lim_{n \to \infty} {2^{2n}} = \infty$&lt;/p&gt;

&lt;h2 id=&quot;complexity-table&quot;&gt;Complexity Table&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;in Big O of&lt;/th&gt;
      &lt;th&gt;$ln(n)$&lt;/th&gt;
      &lt;th&gt;lg_2(n)&lt;/th&gt;
      &lt;th&gt;lg_2(n^2)&lt;/th&gt;
      &lt;th&gt;(lg_2(n))^2&lt;/th&gt;
      &lt;th&gt;n&lt;/th&gt;
      &lt;th&gt;n lg_2 n&lt;/th&gt;
      &lt;th&gt;2^n&lt;/th&gt;
      &lt;th&gt;2^{3n}&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ln(n)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;log(n)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;log(n^2)&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;(lg_2(n))^2&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;n&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;n log n&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2^n&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2^{3n}&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;Y&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;complexity-proofs&quot;&gt;Complexity Proofs&lt;/h2&gt;

&lt;h3 id=&quot;prove-n-in-on-lg-n&quot;&gt;Prove $n \in O(n lg n)$&lt;/h3&gt;

&lt;p&gt;$\exists n_0, \exists c, \forall n, n \geq n_0 \implies f(n) \leq c \cdot g(n)$&lt;/p&gt;

&lt;p&gt;$n \leq 1n$&lt;/p&gt;

&lt;p&gt;$n \leq n \cdot log(n), n \geq 2$&lt;/p&gt;

&lt;p&gt;$n \leq c \cdot n \cdot log(n)$&lt;/p&gt;

&lt;p&gt;Therefore we have c = 1, and n_0 = 2.&lt;/p&gt;

&lt;h3 id=&quot;prove-n-logn-notin-on&quot;&gt;Prove $n log(n) \notin O(n)$&lt;/h3&gt;

&lt;p&gt;Assume for a contradiction that $nlog(n) \in O(n)$, so&lt;/p&gt;

&lt;p&gt;$\exists c, \exists n_0, \forall n, n \geq n_0 \implies nlog(n) \leq c \cdot n$.&lt;/p&gt;

&lt;p&gt;$log(n) \leq c$
$n \leq 2^c$&lt;/p&gt;

&lt;p&gt;Suppose $n &amp;gt; 2^c$, then $n \geq n_0 \implies n \leq 2^c$. Which is a contradiction.&lt;/p&gt;

&lt;h3 id=&quot;prove-6n5--n2---n3-in-thetan5&quot;&gt;Prove $6n^5 + n^2 - n^3 \in \Theta(n^5)$&lt;/h3&gt;

&lt;p&gt;First prove $6n^5 + n^2 - n^3 \in O(n^5)$&lt;/p&gt;

&lt;p&gt;$\exists n_0, \exists c, \forall n, n \geq n_0 \implies f(n) \leq c \cdot g(n)$&lt;/p&gt;

&lt;p&gt;$6n^5 + n^2 - n^3 \leq 6n^5 + n^2 \leq 6n^5 + n^5 \leq 7n^5$&lt;/p&gt;

&lt;p&gt;Let c = 7, and n = 1.&lt;/p&gt;

&lt;p&gt;Then prove $6n^5 + n^2 - n^3 \in \Omega(n^5)$&lt;/p&gt;

&lt;p&gt;$\exists n_0, \exists c, \forall n, n \geq n_0 \implies f(n) \geq c \cdot g(n)$&lt;/p&gt;

&lt;p&gt;$6n^5 + n^2 - n^3 \geq 6n^5 - n^3 \geq 5n^5$&lt;/p&gt;

&lt;p&gt;Let c = 5, and n != 1.&lt;/p&gt;

&lt;h3 id=&quot;prove-3n2---4n-in-omegan2&quot;&gt;Prove $3n^2 - 4n \in \Omega(n^2)$&lt;/h3&gt;

&lt;p&gt;$3n^2 - 4n \geq bn^2$&lt;/p&gt;

&lt;p&gt;$3n - 4 \geq bn$&lt;/p&gt;

&lt;p&gt;$3n - bn \geq 4$&lt;/p&gt;

&lt;p&gt;$n(3-b) \geq 4$&lt;/p&gt;

&lt;p&gt;$n \geq \frac{4}{3-b}$&lt;/p&gt;</content><author><name></name></author><category term="cscb63" /><category term="cscb63" /><category term="course-notes" /><summary type="html">Notes takes for complexity module of CSCB63 course at UTSC. Ordered Dictionary Finite map from keys to values, assume keys are comparable. Some operations supported: insert(k, v) lookup(k) delete(k) Ordered set is the same, just with no values, only keys. If we implement this using a binary tree, lookup can be very slow if we insert all data within sorted order. We will learn how to improve this. Hashed Dictionary / Table Finite map from keys to values, assume keys can be hashed. Same operations as ordered dictionaries. Hashed set is the same, just with no values, only keys. Hash table is an array of size $L$, put key $k$ in $A[h(k) \% L]$ We will learn how to choose the hash function, and what to do if there is a collision. Priority Queue Collection of priority-job pairs, priority is comparable. Operations supported: insert(p, j) max() extract-max() increase-priority(j, k) Using heap to implement this can be super fast and easy. Graph Includes vertices and edges. Will learn how to compute reachability, cycles, connected components, and spanning tree/forest. Disjoint Sets Collection of disjoint sets. Operations supported: make-set(x) union(S, S’) find(x) If we implement this using trees, amortized time can be almost constant. Amortized Time Analysis Some operations might be slow in the worst case, but rarely happens. We might not be interesting in only the worst case. $at = \frac{\text{total time of calls}}{\# calls}$ Useful Manipulations</summary></entry><entry><title type="html">CSCC69 Operating Systems - Lecture 1</title><link href="https://jackzh.com/cscc69/2019/01/10/cscc69-intro.html" rel="alternate" type="text/html" title="CSCC69 Operating Systems - Lecture 1" /><published>2019-01-10T16:25:00-05:00</published><updated>2019-01-10T16:25:00-05:00</updated><id>https://jackzh.com/cscc69/2019/01/10/cscc69-intro</id><content type="html" xml:base="https://jackzh.com/cscc69/2019/01/10/cscc69-intro.html">&lt;h2 id=&quot;operating-system-boot-process&quot;&gt;Operating System Boot Process&lt;/h2&gt;

&lt;p&gt;This is just a basic description of how a Pentium computer boots.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First the BIOS is loaded from motherboard RAM.
    &lt;ul&gt;
      &lt;li&gt;BIOS checks how much RAM is installed.&lt;/li&gt;
      &lt;li&gt;Other devices like keyboard / mouse are checked.&lt;/li&gt;
      &lt;li&gt;Then checks ISA and PCI busses.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BIOS then determines the boot device listed in CMOS memory.
    &lt;ul&gt;
      &lt;li&gt;Usually floppy -&amp;gt; CD -&amp;gt; HDD&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The first sector of boot device is read and loaded
    &lt;ul&gt;
      &lt;li&gt;Examines the partition table at end of the boot sector, to determine which partition to use.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The boot loader is read from that partition.
    &lt;ul&gt;
      &lt;li&gt;Boot loader loads the OS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;major-os-types&quot;&gt;Major OS Types&lt;/h2&gt;

&lt;h3 id=&quot;mainframe-os&quot;&gt;Mainframe OS&lt;/h3&gt;

&lt;p&gt;Heavily oriented towards processing many jobs at once. However nowdays it is being slowly replaced by UNIX.&lt;/p&gt;

&lt;h3 id=&quot;server-os&quot;&gt;Server OS&lt;/h3&gt;

&lt;p&gt;They run on servers, usually very large PCs or even mainframes. They serve multiple users at once.&lt;/p&gt;

&lt;p&gt;Common server OSes: Solaris, FreeBSD, Linux and Windows Server.&lt;/p&gt;

&lt;h3 id=&quot;multiprocessor-os&quot;&gt;Multiprocessor OS&lt;/h3&gt;

&lt;p&gt;Nowdays most OSes are multiprocessor, for example Windows and Linux. Since most PCs have multiple cores, or even multiple CPUs.&lt;/p&gt;

&lt;h3 id=&quot;personal-computer-os&quot;&gt;Personal Computer OS&lt;/h3&gt;

&lt;p&gt;This is widely known, for example macOS, Windows and Linux. They usually support multiprogramming, and aims to provide the best experience for a single user.&lt;/p&gt;

&lt;h3 id=&quot;handheld-os&quot;&gt;Handheld OS&lt;/h3&gt;

&lt;p&gt;Old school Symbian OS and Palm OS, nowdays it is Android, which is Linux, and iOS, which is UNIX.&lt;/p&gt;

&lt;h3 id=&quot;embedded-os&quot;&gt;Embedded OS&lt;/h3&gt;

&lt;p&gt;Major difference between embedded OS and others is: It does not need to run untrusted software. That leads to simplifications. For example, a MP3 player.&lt;/p&gt;

&lt;h3 id=&quot;sensor-node-os&quot;&gt;Sensor Node OS&lt;/h3&gt;

&lt;p&gt;TinyOS is one of the wellknown ones. These OS are found on sensors, which usually wirelessly communicate with eachother and protect building parameters.&lt;/p&gt;

&lt;h3 id=&quot;real-time-os&quot;&gt;Real-Time OS&lt;/h3&gt;

&lt;p&gt;These are used in assembly lines. Time is critical, for hard real-time systems, deadlines must be met. Soft real-time systems can miss some deadlines.&lt;/p&gt;

&lt;p&gt;Because time is critical, usually there is no protection.&lt;/p&gt;

&lt;h3 id=&quot;smart-card-os&quot;&gt;Smart Card OS&lt;/h3&gt;

&lt;p&gt;The smallest you can get is smart card OSes. Sometimes smart card OSes runs JVM (Java). They are usually powered by the machine they are in contact with.&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-os&quot;&gt;What is an OS&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----------------
Applications
-----------------
Operating System
-----------------
Hardware
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Provides services&lt;/li&gt;
  &lt;li&gt;Resource manager&lt;/li&gt;
  &lt;li&gt;Control program (protection)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;processes&quot;&gt;Processes&lt;/h2&gt;

&lt;p&gt;A process contains&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An address space&lt;/li&gt;
  &lt;li&gt;Set of OS resources&lt;/li&gt;
  &lt;li&gt;Set of general-purpose registers with current values&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-a-context-switch&quot;&gt;What is a Context Switch&lt;/h2&gt;</content><author><name></name></author><category term="cscc69" /><category term="cscc69" /><category term="course-notes" /><summary type="html">Operating System Boot Process This is just a basic description of how a Pentium computer boots. First the BIOS is loaded from motherboard RAM. BIOS checks how much RAM is installed. Other devices like keyboard / mouse are checked. Then checks ISA and PCI busses. BIOS then determines the boot device listed in CMOS memory. Usually floppy -&amp;gt; CD -&amp;gt; HDD The first sector of boot device is read and loaded Examines the partition table at end of the boot sector, to determine which partition to use. The boot loader is read from that partition. Boot loader loads the OS</summary></entry><entry><title type="html">CSCB07 Software Design - Intro to Refactoring</title><link href="https://jackzh.com/cscb07/2018/12/15/cscb07-refactoring.html" rel="alternate" type="text/html" title="CSCB07 Software Design - Intro to Refactoring" /><published>2018-12-15T10:42:00-05:00</published><updated>2018-12-15T10:42:00-05:00</updated><id>https://jackzh.com/cscb07/2018/12/15/cscb07-refactoring</id><content type="html" xml:base="https://jackzh.com/cscb07/2018/12/15/cscb07-refactoring.html">&lt;p&gt;Course notes taken for CSCB07/CSC207 at UofT (Software Design).&lt;/p&gt;

&lt;p&gt;Introduction to refactoring.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Refactoring is restructuring code in a series of small, semantics-preserving transformations in order to make the code easier to maintain and modify.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Code must still work&lt;/li&gt;
  &lt;li&gt;Small steps only so the semantics are preserved&lt;/li&gt;
  &lt;li&gt;Unit tests to prove the code still works&lt;/li&gt;
  &lt;li&gt;Code should be
    &lt;ul&gt;
      &lt;li&gt;More loosely coupled&lt;/li&gt;
      &lt;li&gt;More cohesive modules&lt;/li&gt;
      &lt;li&gt;More comprehensible&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;when-to-refactor&quot;&gt;When to Refactor&lt;/h2&gt;

&lt;p&gt;You should refactor any time you see better way to do things.&lt;/p&gt;

&lt;p&gt;You can do it without breaking the code (unit tests).&lt;/p&gt;

&lt;p&gt;You should not refactor if code is already stable and doesn’t need to change, or if it is someone else’s code.&lt;/p&gt;

&lt;h2 id=&quot;refactoring-process&quot;&gt;Refactoring Process&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Make small change&lt;/li&gt;
  &lt;li&gt;Run all tests to make sure it still works&lt;/li&gt;
  &lt;li&gt;If it works, go to next refactoring&lt;/li&gt;
  &lt;li&gt;If not, fix it, or undo so you still have a working system&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code-smells&quot;&gt;Code Smells&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Duplicate code&lt;/li&gt;
  &lt;li&gt;Long methods&lt;/li&gt;
  &lt;li&gt;Big classes&lt;/li&gt;
  &lt;li&gt;Big switch statements&lt;/li&gt;
  &lt;li&gt;Long navigations &lt;code class=&quot;highlighter-rouge&quot;&gt;a.b().c().d()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Lots of checking for null&lt;/li&gt;
  &lt;li&gt;Data clumps&lt;/li&gt;
  &lt;li&gt;Data classes&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="cscb07" /><category term="cscb07" /><category term="course-notes" /><summary type="html">Course notes taken for CSCB07/CSC207 at UofT (Software Design). Introduction to refactoring.</summary></entry><entry><title type="html">CSCB07 Software Design - Decorator Pattern</title><link href="https://jackzh.com/cscb07/2018/12/14/cscb07-decorator-pattern.html" rel="alternate" type="text/html" title="CSCB07 Software Design - Decorator Pattern" /><published>2018-12-14T15:28:00-05:00</published><updated>2018-12-14T15:28:00-05:00</updated><id>https://jackzh.com/cscb07/2018/12/14/cscb07-decorator-pattern</id><content type="html" xml:base="https://jackzh.com/cscb07/2018/12/14/cscb07-decorator-pattern.html">&lt;p&gt;Course notes taken for CSCB07/CSC207 at UofT (Software Design).&lt;/p&gt;

&lt;p&gt;Decorator pattern.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Classes should be open for extension but closed for modification.&lt;/p&gt;

&lt;h2 id=&quot;decorators&quot;&gt;Decorators&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Decorators have the same supertypes as the objects they decorate.&lt;/li&gt;
  &lt;li&gt;Decorator add behaviour by delegating to the object it decorates and then adding its own behaviour.&lt;/li&gt;
  &lt;li&gt;Can add at any time.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;des&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;unknown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;des&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CondimentDecorator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Espresso&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Espresso&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Espresso&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.99&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mocha&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CondimentDecorator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Mocha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, Mocha&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Now you can do&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Beverage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mocha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Espresso&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// You now have mocha! with price of 2.19&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;decorator-design-principle&quot;&gt;Decorator Design Principle&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Classes should be open for extension but closed for modification&lt;/li&gt;
  &lt;li&gt;Systems can be extended without changing existing code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tradeoffs&quot;&gt;Tradeoffs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Time and effort&lt;/li&gt;
  &lt;li&gt;Introduces new abstraction can make code hard to understand&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore don’t use decotrators everywhere.&lt;/p&gt;

&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Provides a flexible alternative to using inheritance to extend functionality.&lt;/li&gt;
  &lt;li&gt;Objects can be decorated dynamically at runtime.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="cscb07" /><category term="cscb07" /><category term="course-notes" /><summary type="html">Course notes taken for CSCB07/CSC207 at UofT (Software Design). Decorator pattern.</summary></entry><entry><title type="html">CSCB07 Software Design - Pub/Sub Pattern</title><link href="https://jackzh.com/cscb07/2018/12/14/cscb07-pub-sub.html" rel="alternate" type="text/html" title="CSCB07 Software Design - Pub/Sub Pattern" /><published>2018-12-14T14:06:00-05:00</published><updated>2018-12-14T14:06:00-05:00</updated><id>https://jackzh.com/cscb07/2018/12/14/cscb07-pub-sub</id><content type="html" xml:base="https://jackzh.com/cscb07/2018/12/14/cscb07-pub-sub.html">&lt;p&gt;Course notes taken for CSCB07/CSC207 at UofT (Software Design).&lt;/p&gt;

&lt;p&gt;Publish and Subscribe Pattern.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Design patterns are template or a recipe to solve a problem. They are repeatable solution to common software engineering problems.&lt;/p&gt;

&lt;h2 id=&quot;publish-subscribe-pattern&quot;&gt;Publish Subscribe Pattern&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;One or more subscribers are interested in the state of a publisher.
    &lt;ul&gt;
      &lt;li&gt;Register their interest by attaching themselves with the publisher.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When something changes in publisher.
    &lt;ul&gt;
      &lt;li&gt;Notify message is sent to each subscriber.&lt;/li&gt;
      &lt;li&gt;Each subscriber responds to the notification in way it chooses.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When subscriber is no longer insterested in publisher state, just detatch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Publisher is also called Observable&lt;/p&gt;

&lt;p&gt;Subscriber is called Observer&lt;/p&gt;

&lt;h3 id=&quot;observer-interface&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Observer&lt;/code&gt; Interface&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;update(Observable o, Object arg) -&amp;gt; void&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;observable-class&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt; Class&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;addObserver(Observer o) -&amp;gt; void&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deleteObserver(Observer o) -&amp;gt; void&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;notifyObservers() -&amp;gt; void&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note THIS IS A CLASS!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OperatingSystem&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shutDown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I am about to shut down&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notifyObservers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Save the file&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Loosely coupled systems&lt;/li&gt;
  &lt;li&gt;Encouages us to know about the relationships between different parts of our app&lt;/li&gt;
  &lt;li&gt;One of the best tool to design decoupled systems&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="cscb07" /><category term="cscb07" /><category term="course-notes" /><summary type="html">Course notes taken for CSCB07/CSC207 at UofT (Software Design). Publish and Subscribe Pattern.</summary></entry></feed>