<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://jackzh.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jackzh.com/" rel="alternate" type="text/html" /><updated>2018-12-14T14:43:44-05:00</updated><id>https://jackzh.com/feed.xml</id><title type="html">Jun Zheng</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">CSCB07 Software Design - Polymorphism, Abstract Classes, Interfaces, Liskov, Singleton</title><link href="https://jackzh.com/cscb07/2018/12/14/cscb07-polymorphism.html" rel="alternate" type="text/html" title="CSCB07 Software Design - Polymorphism, Abstract Classes, Interfaces, Liskov, Singleton" /><published>2018-12-14T13:01:00-05:00</published><updated>2018-12-14T13:01:00-05:00</updated><id>https://jackzh.com/cscb07/2018/12/14/cscb07-polymorphism</id><content type="html" xml:base="https://jackzh.com/cscb07/2018/12/14/cscb07-polymorphism.html">&lt;p&gt;Course notes taken for CSCB07/CSC207 at UofT (Software Design).&lt;/p&gt;

&lt;p&gt;Polymorphism, Abstract Classes, Interfaces, Liskov, Singleton.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;polymorphism&quot;&gt;Polymorphism&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Poly = many&lt;/li&gt;
  &lt;li&gt;Morph = change of form&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The concept is basically that you should have a general super class, and sub classes takes different shapes and forms of the super class.&lt;/p&gt;

&lt;p&gt;A basic example would be:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;meow&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Snake&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;szzzz&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Enables you to program in the general rather then specific.&lt;/li&gt;
  &lt;li&gt;Enables you to write programs that processes objects that share the same super class.&lt;/li&gt;
  &lt;li&gt;Easily extensible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;recap&quot;&gt;Recap&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;In polymorphism you have a base class reference pointing to an object of subclasses.&lt;/li&gt;
  &lt;li&gt;Super class ref can only be used to invoke methods declared within the super class. Otherwise it will cause compilation errors.&lt;/li&gt;
  &lt;li&gt;If you want to perform specific tasks, you can downcast it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;downcasting&quot;&gt;Downcasting&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;function-binding&quot;&gt;Function Binding&lt;/h2&gt;

&lt;p&gt;Function binding maps a function call to function implementation. It decides when I do &lt;code class=&quot;highlighter-rouge&quot;&gt;a.talk()&lt;/code&gt;, which function should be invoked.&lt;/p&gt;

&lt;h3 id=&quot;static-binding&quot;&gt;Static Binding&lt;/h3&gt;

&lt;p&gt;This binds call during compile time.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-binding&quot;&gt;Dynamic Binding&lt;/h3&gt;

&lt;p&gt;Runtime binding. This is used in polymorphism, and this is why it works.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;talk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This is binded to Cat.talk not Animal.talk during runtime.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dynamic binding are used for all methods except:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Private instance methods&lt;/li&gt;
  &lt;li&gt;Overloaded instance methods&lt;/li&gt;
  &lt;li&gt;Instance methods that are final.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final-keyword&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt; Keyword&lt;/h2&gt;

&lt;p&gt;If a method is &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;, it&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cannot be overridden in subclass.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; are implicitly &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If a class is &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;, it&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Can’t be extended&lt;/li&gt;
  &lt;li&gt;All methods in a &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt; class are implicitly &lt;code class=&quot;highlighter-rouge&quot;&gt;final&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;interfaces&quot;&gt;Interfaces&lt;/h2&gt;

&lt;p&gt;A class can implement multiple interfaces but can only extend one class.&lt;/p&gt;

&lt;p&gt;CLasses from different inheritance tree can implement the same interface.&lt;/p&gt;

&lt;p&gt;Interfaces are used when different classes have their own “characteristics”, for example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ComputerScienceStudent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AntiSocial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LovesPizza&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;beAwkward&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eatPizza&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can’t create a new interface instance, since nothing is implemented.&lt;/p&gt;

&lt;h2 id=&quot;abstract-classes&quot;&gt;Abstract Classes&lt;/h2&gt;

&lt;p&gt;Abstract class is like the middleground of classes and interfaces, it can contain abstract methods that must be implemented.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;haha&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can’t create instance of abstract classes.&lt;/p&gt;

&lt;h2 id=&quot;singleton-pattern&quot;&gt;Singleton Pattern&lt;/h2&gt;

&lt;p&gt;Singleton is used when multiple other instances must share a single instance. For example, file system.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FS&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;liskov-substitution-principle&quot;&gt;Liskov Substitution Principle&lt;/h2&gt;

&lt;p&gt;“If it looks like a duck, quacks like a duck, but needs batteries, you probably have the wrong abstraction”.&lt;/p&gt;

&lt;p&gt;For any important properties of a &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Should also hold for its subtypes.&lt;/li&gt;
  &lt;li&gt;And method written for &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; should work equally well on its &lt;code class=&quot;highlighter-rouge&quot;&gt;subtypes&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="cscb07" /><category term="cscb07" /><category term="course-notes" /><summary type="html">Course notes taken for CSCB07/CSC207 at UofT (Software Design). Polymorphism, Abstract Classes, Interfaces, Liskov, Singleton.</summary></entry><entry><title type="html">CSCB07 Software Design - More Java Memory Model</title><link href="https://jackzh.com/cscb07/2018/12/14/cscb07-java-memory-model-depth.html" rel="alternate" type="text/html" title="CSCB07 Software Design - More Java Memory Model" /><published>2018-12-14T12:45:00-05:00</published><updated>2018-12-14T12:45:00-05:00</updated><id>https://jackzh.com/cscb07/2018/12/14/cscb07-java-memory-model-depth</id><content type="html" xml:base="https://jackzh.com/cscb07/2018/12/14/cscb07-java-memory-model-depth.html">&lt;p&gt;Course notes taken for CSCB07/CSC207 at UofT (Software Design).&lt;/p&gt;

&lt;p&gt;More topics on Java memory model.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;stack&quot;&gt;Stack&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Values exist only within the function scope.
    &lt;ul&gt;
      &lt;li&gt;Once returns, values are freed automatically.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Only primitives.
    &lt;ul&gt;
      &lt;li&gt;Helps stack to be small, and individual stack frames small. (so we can do recursive calls :)).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;For objects, only references (which are primitives) are passed around on stack.&lt;/li&gt;
  &lt;li&gt;Can’t be shared between threads.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Java does not specify how references are implemented, but in C, they are integers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Each function have their own &lt;strong&gt;stack frame&lt;/strong&gt;.
    &lt;ul&gt;
      &lt;li&gt;Stack frames are destroyed once method returns.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;heap&quot;&gt;Heap&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Objects are on the heap, they are created using &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword.&lt;/li&gt;
  &lt;li&gt;Only destroyed if garbage collector collects it.&lt;/li&gt;
  &lt;li&gt;Object with all its instance members (variables/methods) are put on the heap.&lt;/li&gt;
  &lt;li&gt;Can be shared by multiple threads.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;static-variables&quot;&gt;Static Variables&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The heap is divided into two parts:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object Heap Space&lt;/code&gt; where all instances live.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Static Heap Space&lt;/code&gt; where all static members live.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.evernote.com/l/Aq0hoi4ftghMtowCxNW0fcYUZr7Jzqy-7TwB/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="cscb07" /><category term="cscb07" /><category term="course-notes" /><summary type="html">Course notes taken for CSCB07/CSC207 at UofT (Software Design). More topics on Java memory model.</summary></entry><entry><title type="html">CSCB07 Software Design - Software Development Process</title><link href="https://jackzh.com/cscb07/2018/12/13/cscb07-software-dev-process.html" rel="alternate" type="text/html" title="CSCB07 Software Design - Software Development Process" /><published>2018-12-13T20:32:00-05:00</published><updated>2018-12-13T20:32:00-05:00</updated><id>https://jackzh.com/cscb07/2018/12/13/cscb07-software-dev-process</id><content type="html" xml:base="https://jackzh.com/cscb07/2018/12/13/cscb07-software-dev-process.html">&lt;p&gt;Course notes taken for CSCB07/CSC207 at UofT (Software Design).&lt;/p&gt;

&lt;p&gt;CRC cards and how to properly develop software with a team.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In previous note, we discussed CRC cards, they look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;------------------------------------------------
| Class: InputAudioDevice                      |
| Super-classes: AudioDevice                   |
| Sub-classes: Microphone                      |
| Responsibility:                              |
|     - Passes audio signal to computer.       |
| Collaborators:                               |
|     - StreamWriter                           |
------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s convert it to an actual class!&lt;/p&gt;

&lt;p&gt;An &lt;code class=&quot;highlighter-rouge&quot;&gt;InputAudioDevice&lt;/code&gt; might look like the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputAudioDevice&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AudioDevice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeAudioStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;object-class&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt; Class&lt;/h2&gt;

&lt;p&gt;All classes within Java extends from &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, and you should always consider override some of the methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#clone() -&amp;gt; Object&lt;/code&gt; Creates and returns a copy of this object.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;equals(Object obj) -&amp;gt; boolean&lt;/code&gt; Check if &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; is equal to this one.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hashCode() -&amp;gt; int&lt;/code&gt; Returns a hash value.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toString() -&amp;gt; String&lt;/code&gt; Returns string representation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;always-check-parameters&quot;&gt;Always Check Parameters&lt;/h2&gt;

&lt;p&gt;You should always check parameter validity, and indicate in JavaDoc what exception might be thrown within this method.&lt;/p&gt;

&lt;p&gt;Not really necessary within private methods, since you have full control over them.&lt;/p&gt;

&lt;h2 id=&quot;software-development-process&quot;&gt;Software Development Process&lt;/h2&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;In many courses, programs are coded once and thrown away. However, in real life, that is not the case, and development is an agile process.&lt;/p&gt;

&lt;h3 id=&quot;common-elements-within-software-development&quot;&gt;Common Elements Within Software Development&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Requirements
    &lt;ul&gt;
      &lt;li&gt;What do we need to build?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Design
    &lt;ul&gt;
      &lt;li&gt;How can we build the thing so it meets the requirement?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Implementation
    &lt;ul&gt;
      &lt;li&gt;Build it!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Verification
    &lt;ul&gt;
      &lt;li&gt;Does it work?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Maintenance
    &lt;ul&gt;
      &lt;li&gt;Fixing/adding/changing features.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;validation-and-verification&quot;&gt;Validation and Verification&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Validation
    &lt;ul&gt;
      &lt;li&gt;Test the specification, not the software.&lt;/li&gt;
      &lt;li&gt;Are we building the right thing?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Verification
    &lt;ul&gt;
      &lt;li&gt;Testing the software we built.&lt;/li&gt;
      &lt;li&gt;Does it follow our specification?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.evernote.com/l/Aq0E9ia59mlBq4EVzVBI7kKCGfpkftxDDw8B/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;waterfall-model&quot;&gt;Waterfall Model&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://www.evernote.com/l/Aq2LDGa-GXJOZ4Y5IanWdB88NtoGkcRHgmsB/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Advantages
    &lt;ul&gt;
      &lt;li&gt;Easy to use&lt;/li&gt;
      &lt;li&gt;Works well for small projects&lt;/li&gt;
      &lt;li&gt;Cost effective&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Disadvantages
    &lt;ul&gt;
      &lt;li&gt;Only test one time after everything has been built&lt;/li&gt;
      &lt;li&gt;High risk&lt;/li&gt;
      &lt;li&gt;Not flexible&lt;/li&gt;
      &lt;li&gt;Bad for complex projects&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It does not work well when&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Requirement changes&lt;/li&gt;
  &lt;li&gt;You are not 100% sure about the requirements&lt;/li&gt;
  &lt;li&gt;New ideas come up&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;iterative-development&quot;&gt;Iterative Development&lt;/h3&gt;

&lt;p&gt;Don’t finish all features in one go, you code, get feedback, then code again…&lt;/p&gt;

&lt;h3 id=&quot;incremental-development&quot;&gt;Incremental Development&lt;/h3&gt;

&lt;p&gt;Code only what you need now, code the rest piece by piece.&lt;/p&gt;

&lt;h3 id=&quot;agile-methods&quot;&gt;Agile Methods&lt;/h3&gt;

&lt;p&gt;Agility is the ability to both create and respond to change in order to profit in a turbulent business environment.&lt;/p&gt;

&lt;p&gt;Agile is&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;People oriented&lt;/li&gt;
  &lt;li&gt;Easily responds to changes&lt;/li&gt;
  &lt;li&gt;Results in the creation of working systems that meets the needs of its stakeholders&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Traditional software development timeline:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Requirements -&amp;gt; Build -&amp;gt; Test -&amp;gt; Release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can only use the software at the end, and bugs are found late.&lt;/p&gt;

&lt;p&gt;Agile timeline:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Build/Release -&amp;gt; Build/Release -&amp;gt; Build/Relase -&amp;gt; ....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good visibility of progress, find bugs early, easy to respond to changes, use the software early.&lt;/p&gt;

&lt;h2 id=&quot;user-stories&quot;&gt;User Stories&lt;/h2&gt;

&lt;p&gt;Users usually do not use the same terms as software developers.&lt;/p&gt;

&lt;p&gt;User stories help to cleaify requirements and can be used for clarification when communicating with the client.&lt;/p&gt;

&lt;p&gt;Can also used to identify different types of users.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;As a store associate, I can search for a book by its ISBN, so that I can determine the book's in-stock quantity for the store.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;As a bookstore customer, I can search for books by the Author's name, so that I can easily find all book by that author.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;agile-tools&quot;&gt;Agile Tools&lt;/h2&gt;

&lt;p&gt;There are a few important tools we use in agile development process:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User stories to drive design&lt;/li&gt;
  &lt;li&gt;Continuous unit testing&lt;/li&gt;
  &lt;li&gt;Pair programming&lt;/li&gt;
  &lt;li&gt;Lightweight design as code is written and features are added&lt;/li&gt;
  &lt;li&gt;Continuous refactoring&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scrum-agile-development-process&quot;&gt;Scrum Agile Development Process&lt;/h2&gt;

&lt;p&gt;It is iterative and incremental, and there are a few roles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Product Owner
    &lt;ul&gt;
      &lt;li&gt;The customer&lt;/li&gt;
      &lt;li&gt;Who is paying for this&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Team
    &lt;ul&gt;
      &lt;li&gt;The Team is responsible for managing itself and has the full authority to do anything to meet the Sprint goal within the guidelines, standards, and conventions of the organization and of Scrum.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scrum Master
    &lt;ul&gt;
      &lt;li&gt;Maintains the process, enforces the rules&lt;/li&gt;
      &lt;li&gt;Remove development obstacles&lt;/li&gt;
      &lt;li&gt;Facilitates communications&lt;/li&gt;
      &lt;li&gt;The Scrum Master is responsible for the success of the project, and he or she helps increase the probability of success by helping the Product Owner select the most valuable product backlog and by helping the Team turn that backlog into functionality.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scrum-method&quot;&gt;Scrum Method&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Product Backlog - Features of the product
    &lt;ul&gt;
      &lt;li&gt;Master list of all functionalities in the product&lt;/li&gt;
      &lt;li&gt;Does not have to be complete&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sprint Backlog - Subset of features to work on for the sprint
    &lt;ul&gt;
      &lt;li&gt;List of tasks that the team is committing they will do&lt;/li&gt;
      &lt;li&gt;Must be drawn from product backlog, and broken down to smaller items&lt;/li&gt;
      &lt;li&gt;Chosen based on the priority&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Code Sprint - Can take weeks to complete&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Daily Scrum - Daily meetings
    &lt;ul&gt;
      &lt;li&gt;What did you work on?&lt;/li&gt;
      &lt;li&gt;What will you work on?&lt;/li&gt;
      &lt;li&gt;Is there any issue that you are currently blocked on?&lt;/li&gt;
      &lt;li&gt;Usually short, like 15 mins.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Final Product - The software&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.evernote.com/l/Aq3AC7U482hJLbArItqeZ5BfrI-fPs-j-gIB/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="cscb07" /><category term="cscb07" /><category term="course-notes" /><summary type="html">Course notes taken for CSCB07/CSC207 at UofT (Software Design). CRC cards and how to properly develop software with a team.</summary></entry><entry><title type="html">How I Redesigned IFCAT</title><link href="https://jackzh.com/random/2018/12/12/how-ice-mc2-software-design-is-flawed.html" rel="alternate" type="text/html" title="How I Redesigned IFCAT
" /><published>2018-12-12T09:22:00-05:00</published><updated>2018-12-12T09:22:00-05:00</updated><id>https://jackzh.com/random/2018/12/12/how-ice-mc2-software-design-is-flawed</id><content type="html" xml:base="https://jackzh.com/random/2018/12/12/how-ice-mc2-software-design-is-flawed.html">&lt;p&gt;A good piece of code should look clean, concise and does what it is supposed to do.&lt;/p&gt;

&lt;p&gt;I am not an expert in software engineering, but during my time contributing to IFCAT project, I did find some design flaws, and this is how I fixed them.&lt;/p&gt;

&lt;p&gt;This post mainly serves as my personal reference in the future when I try to code Node.js systems. But also is a good read for anyone who is new to programming.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;controllers&quot;&gt;Controllers&lt;/h2&gt;

&lt;p&gt;In the original code, controllers are single JavaScript files that use &lt;code class=&quot;highlighter-rouge&quot;&gt;module.exports&lt;/code&gt; to export simple functions.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Save groups for tutorial&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;saveGroups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Logic here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is all good and functional, but what if I need to store state variables? Say I need to keep track of how many users are logged in. It is impossible to do so without another program such as Redis.&lt;/p&gt;

&lt;p&gt;I decided to create a Controller super-class that exposes a &lt;code class=&quot;highlighter-rouge&quot;&gt;getInstance()&lt;/code&gt; static method (yes in JavaScript static methods gets inherited), so I can have all controllers as singletons.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StudentController&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getStudent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Do stuff here.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now I can do cool stuff like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;studentController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StudentController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;studentController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getStudent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which is much more readable and robust.&lt;/p&gt;

&lt;h2 id=&quot;routers&quot;&gt;Routers&lt;/h2&gt;

&lt;p&gt;Old code routing files contained actual controller and middleware logic, which is a big no-no.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// non-authenticated routes&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'local-login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;successRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/student/courses'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;failureRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;failureFlash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/uteach-login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'auth0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;successRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/student/courses'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;failureRedirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;failureFlash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/student/courses'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// check if user is authenticated&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The new design encapsulates all logic within their own classes, router only serves as a mounting point.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controllers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../Controllers/Student'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'express'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GetCourseByParameterMiddleware&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../Middlewares/ParameterMiddlewares/GetCourseByParameterMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GetQuestionByParameterMiddleware&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../Middlewares/ParameterMiddlewares/GetQuestionByParameterMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GetTutorialQuizByParameterMiddleware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../Middlewares/ParameterMiddlewares/GetTutorialQuizByParameterMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EnsureAuthenticatedMiddleware&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../Middlewares/EnsureAuthenticatedMiddleware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Mount all middlewares&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;GetCourseByParameterMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applyToRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'course'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;GetQuestionByParameterMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applyToRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'question'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;GetTutorialQuizByParameterMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applyToRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tutorialQuiz'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;EnsureAuthenticatedMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applyToRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StudentController&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../Controllers/Student/StudentController'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FileController&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../Controllers/Student/FileController'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;QuestionController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../Controllers/Student/QuestionController'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;studentController&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StudentController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileController&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FileController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;questionController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;QuestionController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// authenticated routes&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/courses'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;studentController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCourses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/courses/:course/quizzes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;studentController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getQuizzes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/courses/:course/quizzes/:tutorialQuiz/start'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controllers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TutorialQuiz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startQuiz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/courses/:course/quizzes/:tutorialQuiz/submit-question'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;questionController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getQuestionForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/courses/:course/quizzes/:tutorialQuiz/submit-question'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;questionController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addQuestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/file/:id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFileLinkById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;inconsistant-naming-schemes&quot;&gt;Inconsistant Naming Schemes&lt;/h2&gt;

&lt;p&gt;This is an obvious one, if you look into socket.io folder, you can find events that are called &lt;code class=&quot;highlighter-rouge&quot;&gt;REQUEST_QUIZ&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;quizData&lt;/code&gt;, which just looks weird.&lt;/p&gt;

&lt;p&gt;I decided to go with &lt;code class=&quot;highlighter-rouge&quot;&gt;REQUEST_QUIZ&lt;/code&gt; style.&lt;/p&gt;

&lt;h2 id=&quot;ancient-async-practice&quot;&gt;Ancient Async Practice&lt;/h2&gt;

&lt;p&gt;This is not really a design flaw, but more of a technical restrictions.&lt;/p&gt;

&lt;p&gt;For example the following code:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;course&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$addToSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;instructors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'success'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'The list of instructors has been updated for the course.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is more readable if written in the following way:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;course&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$addToSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;instructors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'success'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'The list of instructors has been updated for the course.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;       
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;lacking-newlines&quot;&gt;Lacking Newlines&lt;/h2&gt;

&lt;p&gt;It is not good to have excessive newlines, but also bad to not have them at all. In the old code, there is no blank line between methods.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Populate files&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;QuestionSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withFiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'files'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Check if question is a multiple choice question&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;QuestionSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMultipleChoice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'multiple choice'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Check if question is a multiple select question&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;QuestionSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMultipleSelect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'multiple select'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Check if question is a short answer question&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;QuestionSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isShortAnswer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'short answer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Much nicer this way:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Populate files&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;QuestionSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withFiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'files'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Check if question is a multiple choice question&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;QuestionSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMultipleChoice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'multiple choice'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Check if question is a multiple select question&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;QuestionSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMultipleSelect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'multiple select'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Check if question is a short answer question&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;QuestionSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isShortAnswer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'short answer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are more design problems that I haven’t noticed yet, I will update this post as I code.&lt;/p&gt;</content><author><name></name></author><category term="random" /><category term="software-design" /><category term="draft" /><summary type="html">A good piece of code should look clean, concise and does what it is supposed to do. I am not an expert in software engineering, but during my time contributing to IFCAT project, I did find some design flaws, and this is how I fixed them. This post mainly serves as my personal reference in the future when I try to code Node.js systems. But also is a good read for anyone who is new to programming.</summary></entry><entry><title type="html">CSCB07 Software Design - Java Memory Model &amp;amp; CRC</title><link href="https://jackzh.com/cscb07/2018/12/11/cscb07-memory-model.html" rel="alternate" type="text/html" title="CSCB07 Software Design - Java Memory Model &amp; CRC" /><published>2018-12-11T13:50:00-05:00</published><updated>2018-12-11T13:50:00-05:00</updated><id>https://jackzh.com/cscb07/2018/12/11/cscb07-memory-model</id><content type="html" xml:base="https://jackzh.com/cscb07/2018/12/11/cscb07-memory-model.html">&lt;p&gt;Course notes taken for CSCB07/CSC207 at UofT (Software Design).&lt;/p&gt;

&lt;p&gt;Java memory model and some CRC.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I have already covered memory model in more depth here: &lt;a href=&quot;/cscb09/2018/08/08/cscb09-intro-to-c.html#memory-model&quot;&gt;CSCB09 - Intro to C&lt;/a&gt;, therefore this note won’t cover too much detail.&lt;/p&gt;

&lt;h2 id=&quot;stack-and-heap&quot;&gt;Stack and Heap&lt;/h2&gt;

&lt;p&gt;Stack:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Local variables are stored within the stack, and will be freed if the variable goes out of scope.&lt;/li&gt;
  &lt;li&gt;Faster than heap.&lt;/li&gt;
  &lt;li&gt;Stores local data, return addresses, used for function parameter passing.&lt;/li&gt;
  &lt;li&gt;Can have overflow if too much stack is used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Heap:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In Java, objects are allocated on the heap using &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Slower than stack.&lt;/li&gt;
  &lt;li&gt;Variables must be destroyed manually, in Java, there is a “garbage collector” to do this.&lt;/li&gt;
  &lt;li&gt;Responsible for memory leaks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Informally, following code in memory would look like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://www.evernote.com/l/Aq2lf1PZXYVJepxAH6KDXMs_sZJ0H3SrPRsB/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;All primitive types are stored within stack.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;inheritance&quot;&gt;Inheritance&lt;/h2&gt;

&lt;p&gt;You can create a general class and let other sub-classes extend it.&lt;/p&gt;

&lt;p&gt;Class that is inherited is called super class, class that is inheriting is called sub class.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Class DO NOT inherit static fields / methods. No do it inherit private and no modifier (package protected) fields / methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sub classes can call &lt;code class=&quot;highlighter-rouge&quot;&gt;super()&lt;/code&gt; to access super class’ constructor, and this should be the first thing you call in sub-class constructor.&lt;/p&gt;

&lt;h3 id=&quot;why-encapsulation&quot;&gt;Why Encapsulation?&lt;/h3&gt;

&lt;p&gt;It seperates implementation details from behaviour.&lt;/p&gt;

&lt;p&gt;Steve McConnell in his book, ‘Code Complete’ uses the analogy of an ice berg.&lt;/p&gt;

&lt;p&gt;Only a small portion of iceberg is visible on the surface, most of it is hidden underwater.&lt;/p&gt;

&lt;p&gt;Similarly, in our software design the visible parts of our modules/classes constitute their public interface and this is exposed to the outside world. The rest of it should be hidden to the naked eye.&lt;/p&gt;

&lt;h3 id=&quot;overriding&quot;&gt;Overriding&lt;/h3&gt;

&lt;p&gt;When methods have the same name and signature, the method is overridden.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Super&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Overrides Super.myMethod&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;overloading&quot;&gt;Overloading&lt;/h3&gt;

&lt;p&gt;When methods have the same name, but different signature (input types, not including return types), the method is overloaded.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Super&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Overloads Super.myMethod&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;In Java, everything inherits from Object class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;is-a-relationship&quot;&gt;IS-A Relationship&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sportscar&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we call Sportscar is a Car, which is an Object.&lt;/p&gt;

&lt;h3 id=&quot;has-a-relationship&quot;&gt;HAS-A Relationship&lt;/h3&gt;

&lt;p&gt;Also called composition or aggregation.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we call Car has an Engine. We can also say Car is collaborating with Engine.&lt;/p&gt;

&lt;h2 id=&quot;single-responsibility-principle&quot;&gt;Single Responsibility Principle&lt;/h2&gt;

&lt;p&gt;In OOP, SRP states that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Every class should have a single responsibility.&lt;/li&gt;
  &lt;li&gt;the responsibility should be entirely encapsulated by the class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&quot;&gt;https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A class should have one and only one reason to change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;crc-cards&quot;&gt;CRC Cards&lt;/h2&gt;

&lt;p&gt;A CRC card looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;------------------------------------------------
| Class: InputAudioDevice                      |
| Super-classes: AudioDevice                   |
| Sub-classes: Microphone                      |
| Responsibility:                              |
|     - Passes audio signal to computer.       |
| Collaborators:                               |
|     - StreamWriter                           |
------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Personally I think CRC cards are stupid and hard to read for large scale projects. As it is impossible to comprehend if you have say 200 cards (where is the entry point?), how do I cross reference?&lt;/p&gt;</content><author><name></name></author><category term="cscb07" /><category term="cscb07" /><category term="course-notes" /><summary type="html">Course notes taken for CSCB07/CSC207 at UofT (Software Design). Java memory model and some CRC.</summary></entry><entry><title type="html">CSCB07 Software Design - Intro to Java</title><link href="https://jackzh.com/cscb07/2018/12/11/cscb07-intro-java.html" rel="alternate" type="text/html" title="CSCB07 Software Design - Intro to Java" /><published>2018-12-11T12:36:00-05:00</published><updated>2018-12-11T12:36:00-05:00</updated><id>https://jackzh.com/cscb07/2018/12/11/cscb07-intro-java</id><content type="html" xml:base="https://jackzh.com/cscb07/2018/12/11/cscb07-intro-java.html">&lt;p&gt;Course notes taken for CSCB07/CSC207 at UofT (Software Design).&lt;/p&gt;

&lt;p&gt;Introduction to Java programming. This note assumes you are somewhat knows how to program, many obvious details are ignored.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;primitive-types&quot;&gt;Primitive Types&lt;/h2&gt;

&lt;p&gt;Java has 8 primitive types.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; - 32 bit signed integer.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt; - 8 bit signed integer.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;short&lt;/code&gt; - 16 bit signed integer.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;long&lt;/code&gt; - 64 bit signed integer.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; - Single precision 32 bit floating point.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt; - Double precision 64 bit floating point.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;boolean&lt;/code&gt; - 1 bit value.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt; - 16 bit unsigned integer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;strings&quot;&gt;Strings&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; is a class in Java, and it is immutable.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This is less efficient&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;classes-and-objects&quot;&gt;Classes and Objects&lt;/h2&gt;

&lt;p&gt;Classes are like our own custom data types, they are blueprints from which objects are created. It models the state and behaviour of a real world object.&lt;/p&gt;

&lt;p&gt;Objects are created out of classes. It is a software bundle of related state and behaviour.&lt;/p&gt;

&lt;h3 id=&quot;student-example&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Student&lt;/code&gt; Example&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * private, protected, public are access modifiers.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mathMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;physicsMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chemistryMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfStudents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;constructor&quot;&gt;Constructor&lt;/h3&gt;

&lt;p&gt;Constructors are used to create objects.&lt;/p&gt;

&lt;p&gt;They have a few interesting properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They use the same name as the class, and have no return type.&lt;/li&gt;
  &lt;li&gt;If you don’t code any constructors, the default one will be created for you.&lt;/li&gt;
  &lt;li&gt;If you do provide any constructors, the default one will not be created for you. (but you can manually create a default constructor).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our &lt;code class=&quot;highlighter-rouge&quot;&gt;Student&lt;/code&gt; class, constructors might look like the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... properties&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Default constructor&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Constructor to set names&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Constructor to set names and marks&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mathMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;physicsMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chemistryMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mathMark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mathMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;physicsMark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;physicsMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;chemistryMark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chemistryMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-objects&quot;&gt;Create Objects&lt;/h3&gt;

&lt;p&gt;Now we have the &lt;code class=&quot;highlighter-rouge&quot;&gt;Student&lt;/code&gt; class, we can create 3 students by running the following code:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jack&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Wilson&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Matt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Milley&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pill&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Zack&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a,b,c&lt;/code&gt; are references with type of &lt;code class=&quot;highlighter-rouge&quot;&gt;Student&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We now encounter a problem, we can’t set the marks! Since constructors can’t be invoked more than once.&lt;/p&gt;

&lt;h2 id=&quot;setters-and-getters&quot;&gt;Setters and Getters&lt;/h2&gt;

&lt;p&gt;Setters also called mutator methods are used to control changes to an instance variable.&lt;/p&gt;

&lt;p&gt;Getters also called accessor methods, they return the value of the instance variable.&lt;/p&gt;

&lt;p&gt;For our student class, we can add the following getters and setters:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... properties&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... constructors&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMathMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mathMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setMathMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mathMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mathMark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mathMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// physics, chemistry ignored&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;instance-methods&quot;&gt;Instance Methods&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Getters and setters are instance methods that depends on an instance of a class. You can create other instance methods if you wish.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... properties&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... constructors&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... getters/setters&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// An instance method&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculateAverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mathMark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;physicsMark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;chemistryMark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;public-and-private&quot;&gt;Public and Private&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; are called access modifiers, there is another one called &lt;code class=&quot;highlighter-rouge&quot;&gt;protected&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt; properties and methods are not accessable outside of the class, and it is meant to be used to hide implementation details.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; properties and methods are accessable outside of the class, they are used to describe behaviours.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Student.java&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Main.java&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;static-fields-and-methods&quot;&gt;Static Fields and Methods&lt;/h2&gt;

&lt;p&gt;Static fields and methods do not depend on an instance.&lt;/p&gt;

&lt;p&gt;In our student class, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;numberOfStudents&lt;/code&gt; as a static field.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfStudents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNumberOfStudents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;numberOfStudents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;factory-methods&quot;&gt;Factory Methods&lt;/h2&gt;

&lt;p&gt;Consider the following class:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SmartPhone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Construct with name&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SmartPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Construct with serial number&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SmartPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I use the class, it gets confusing, what is &lt;code class=&quot;highlighter-rouge&quot;&gt;String n&lt;/code&gt; and what is &lt;code class=&quot;highlighter-rouge&quot;&gt;int n&lt;/code&gt;? Since constructors have the same name, I can’t really tell.&lt;/p&gt;

&lt;p&gt;Factory methods provides abstraction on top of constructors, and they can have names.&lt;/p&gt;

&lt;p&gt;We can refactor our code to the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SmartPhone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Construct with name&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SmartPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Construct with serial number&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SmartPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Factory methods&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SmartPhone&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SmartPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SmartPhone&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createWithSerialNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SmartPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note we changed both constructors to &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can now use the class like the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SmartPhone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lgg7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SmartPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createWithName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LG G7 ThinQ&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SmartPhone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SmartPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createWithSerialNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="cscb07" /><category term="cscb07" /><category term="course-notes" /><summary type="html">Course notes taken for CSCB07/CSC207 at UofT (Software Design). Introduction to Java programming. This note assumes you are somewhat knows how to program, many obvious details are ignored.</summary></entry><entry><title type="html">CSCB07 Software Design - SVN</title><link href="https://jackzh.com/cscb07/2018/12/11/cscb07-svn.html" rel="alternate" type="text/html" title="CSCB07 Software Design - SVN" /><published>2018-12-11T01:40:00-05:00</published><updated>2018-12-11T01:40:00-05:00</updated><id>https://jackzh.com/cscb07/2018/12/11/cscb07-svn</id><content type="html" xml:base="https://jackzh.com/cscb07/2018/12/11/cscb07-svn.html">&lt;p&gt;Course notes taken for CSCB07/CSC207 at UofT (Software Design).&lt;/p&gt;

&lt;p&gt;Basic introduction to version control and how to use SVN.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Why not email code to each other?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Someone is responsible for merging different source files together into one, which is painful.&lt;/li&gt;
  &lt;li&gt;No way to track what file got changed what time by which developer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is version control?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Version control tracks files over a period of time (who wrote what and what your file looked like an hour ago etc.). It also automatically merges contributions.&lt;/p&gt;

&lt;p&gt;It creates revisions, which keep track of the changing states of files over time and merge contributions of multiple developers.&lt;/p&gt;

&lt;h3 id=&quot;benifits-of-version-control&quot;&gt;Benifits of Version Control&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Data integrity
    &lt;ul&gt;
      &lt;li&gt;Nothing is every deleted or lost.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Productivity
    &lt;ul&gt;
      &lt;li&gt;Automatically integrates work from different developers into a central repository.&lt;/li&gt;
      &lt;li&gt;If a revision introduces errors, you can easily go back to a previous version.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Accountability
    &lt;ul&gt;
      &lt;li&gt;Can track who wrote which part of the code.&lt;/li&gt;
      &lt;li&gt;Track when the change is added.&lt;/li&gt;
      &lt;li&gt;Track subsequent changes made by other developers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Record Keeping&lt;/li&gt;
  &lt;li&gt;Rapid Development&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;some-popular-version-control-systems&quot;&gt;Some Popular Version Control Systems&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Git was created by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development. Its current maintainer since 2005 is Junio Hamano.&lt;/p&gt;

&lt;p&gt;As with most other distributed version-control systems, and unlike most client–server systems, &lt;strong&gt;every Git directory on every computer is a full-fledged repository&lt;/strong&gt; with complete history and full version-tracking abilities, independent of network access or a central server. (Wikipedia)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Perforce&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enterprise version control, seems like it is used by gaming companies.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Microsoft Visual SourceSafe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Targets towards small teams, this software is not supported by Microsoft anymore.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Subversion (SVN)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quite widely used, built by Apache Foundation.&lt;/p&gt;

&lt;h2 id=&quot;client-server-architecture&quot;&gt;Client-Server Architecture&lt;/h2&gt;

&lt;p&gt;SVN uses client-server architecture. This architecture is very common among many programs.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note Git is not client-server, it does not have a centralized server at all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://www.evernote.com/l/Aq30awzYd1dGMrjsxjx30DDBHe70DB6sbNkB/image.png&quot; alt=&quot;SVN client server&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;use-subversion&quot;&gt;Use Subversion&lt;/h2&gt;

&lt;p&gt;Before doing anything, you must first checkout the repository:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svn checkout https://lecture1207.googlecode.com/svn/trunk/ lecture1207 --username xyzM@gmail.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above command will checkout repository &lt;code class=&quot;highlighter-rouge&quot;&gt;https://lecture1207.googlecode.com/svn/trunk/&lt;/code&gt; to a folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;lecture1207&lt;/code&gt; as user &lt;code class=&quot;highlighter-rouge&quot;&gt;xyzM@gmail.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After creating a new file, you must add it to SVN tracking tree:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch newfile.txt
svn add newfile.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you can commit using the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svn commit -m &quot;Add newfile.txt&quot; newfile.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To fetch updates from server, use the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svn update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;svn-status&quot;&gt;svn status&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;svn status&lt;/code&gt; command is used to check current repository status, it will give you the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;STATUS_CODE file_name1
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;STATUS_CODE can be one of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; &lt;/code&gt; - Nothing has changed.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; - Marked for addition.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt; - Marked for deletion.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; - Item modified.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; - Item replaced (was removed, but then a new file with same name is added).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; - Contents of the file conflicts with the update from repository.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; - Item is present because of an externals definition.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt; - Ignored by &lt;code class=&quot;highlighter-rouge&quot;&gt;svn:ignore&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; - Not under version control.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; - Item is missing from working copy.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; - Was version as one kind of object (for example file), but then replaced with another type (for example directory).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;svn-log&quot;&gt;svn log&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svn log [PATH]

svn log URL[@REV] [PATH...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Shows log messages from the repository. If no arguments are supplied, svn log shows the log messages for all files and directories inside (and including) the current working directory of your working copy. You can refine the results by specifying a path, one or more revisions, or any combination of the two. The default revision range for a local path is BASE:1.&lt;/p&gt;

&lt;h2 id=&quot;resolve-conflicts&quot;&gt;Resolve Conflicts&lt;/h2&gt;

&lt;p&gt;Following are the instructions provided by the instructor, however it is outdated.&lt;/p&gt;

&lt;p&gt;To discard my own change:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svn revert
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To discard other person’s change:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp someFile.mine.java someFile.java
svn resolved
svn commit -m “I accepted mine changes”
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, there is a new instruction: &lt;a href=&quot;http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.resolve.html&quot;&gt;http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.resolve.html&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="cscb07" /><category term="cscb07" /><category term="course-notes" /><summary type="html">Course notes taken for CSCB07/CSC207 at UofT (Software Design). Basic introduction to version control and how to use SVN.</summary></entry><entry><title type="html">CSCB36 Theory of Computation - Chapter 6 Predicate Logic</title><link href="https://jackzh.com/cscb36/2018/12/05/cscb36-chapter-6.html" rel="alternate" type="text/html" title="CSCB36 Theory of Computation - Chapter 6 Predicate Logic" /><published>2018-12-05T00:00:00-05:00</published><updated>2018-12-05T00:00:00-05:00</updated><id>https://jackzh.com/cscb36/2018/12/05/cscb36-chapter-6</id><content type="html" xml:base="https://jackzh.com/cscb36/2018/12/05/cscb36-chapter-6.html">&lt;p&gt;Notes taken for CSCB36 course at UofT, this post is for Chapter 6, Predicate Logic.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Predicate logic is a generalisation of propositional logic.&lt;/p&gt;

&lt;p&gt;A predicate is a boolean-valued function. The set $D$ of possible values for a predicate’s arguments is called its domain of discourse. The number $n$ of a predicate’s arguments is called it arity. So a n-ary predicate with domain of discourse $D$ is the function: $P: D \times D \times … \times D \to \{0,1\}$.&lt;/p&gt;

&lt;h2 id=&quot;combining-predicates&quot;&gt;Combining Predicates&lt;/h2&gt;

&lt;h3 id=&quot;using-propositional-connectives&quot;&gt;Using Propositional Connectives&lt;/h3&gt;

&lt;p&gt;We can use propositional connectives to combine predicates, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$S(x)$ - $x$ loves watching TV shows.&lt;/li&gt;
  &lt;li&gt;$A(x)$ - $x$ loves watching anime.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can then conveniently connect them to form new predicates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$S(x) \wedge \neg A(x)$ - $x$ loves watching TV shows but not anime.&lt;/li&gt;
  &lt;li&gt;$A(x) \to S(x)$ - If $x$ loves anime, then $x$ must also like TV shows.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-quantifiers&quot;&gt;Using Quantifiers&lt;/h3&gt;

&lt;p&gt;We can also use quantifiers, there are 2 main ones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$\exists x A$ - This is true if there is at least one $x$ so that $A$ holds. (existential quantifier)&lt;/li&gt;
  &lt;li&gt;$\forall x A$ - This is true if for all possible value of $x$, $A$ holds. (universal quantifier)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take from above example, we can construct the following predicates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$\exists x (S(x) \wedge A(x))$ - There exists $x$ who likes TV shows and anime.&lt;/li&gt;
  &lt;li&gt;$\forall x (A(x) \to S(x))$ - For all $x$, if $x$ likes anime, then $x$ must also like TV shows.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;syntax-of-predicate-logic&quot;&gt;Syntax of Predicate Logic&lt;/h2&gt;

&lt;h3 id=&quot;first-order-languages&quot;&gt;First-order Languages&lt;/h3&gt;

&lt;p&gt;A first-order lanauge contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Infinite set of variables.&lt;/li&gt;
  &lt;li&gt;Set of predicate symbols.&lt;/li&gt;
  &lt;li&gt;Set of constant symbols.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All symbols within the language, alongside with connectives, quantifiers, parentheses and comma constitute the basic vocabulary of first-order formulas.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;First-order language with equality is just the language that includes $\approx$ predicate symbol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;formulas&quot;&gt;Formulas&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A term of $L$ is a variable or a constant symbol.&lt;/li&gt;
  &lt;li&gt;An atomic formula of $L$ is an expression of the form $A(t_1, t_2,…)$ ($A$ is a predicate symbol).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: The set of first-order formulate of $L$ is the smallest set such that:&lt;/p&gt;

&lt;p&gt;Basis: Any atomic formula is in the set.&lt;/p&gt;

&lt;p&gt;Induction Step: If $F_1$ and $F_2$ are in the set, and $x$ is a variable of $L$ then the following are also in the set:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$\neg F_1$&lt;/li&gt;
  &lt;li&gt;$(F_1 \wedge F_2)$&lt;/li&gt;
  &lt;li&gt;$(F_1 \vee F_2)$&lt;/li&gt;
  &lt;li&gt;$(F_1 \to F_2)$&lt;/li&gt;
  &lt;li&gt;$(F_1 \iff F_2)$&lt;/li&gt;
  &lt;li&gt;$\forall x F_1$&lt;/li&gt;
  &lt;li&gt;$\exists x F_1$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;note-when-omitting-parentheses&quot;&gt;Note When Omitting Parentheses&lt;/h3&gt;

&lt;p&gt;When omitting parentheses for quantifiers, they only apply to the formula right after it.&lt;/p&gt;

&lt;p&gt;For example: $\exists x A \wedge B$ is the same as $(\exists A) \wedge B$.&lt;/p&gt;

&lt;h2 id=&quot;free-variables&quot;&gt;Free Variables&lt;/h2&gt;

&lt;p&gt;Free variables are all the variables that is not immidiately followed by a quantifier. Say $\exists y A(x, y)$, in this case $x$ is a free variable.&lt;/p&gt;

&lt;p&gt;The definition of a function called $free(F)$ to compute all free variables in a formula is the following.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Basis: $F$ is an atomic formula, say $A(t_1, t_2,…)$, $A$ is an n-ary connective. In this case, $free(F)$ is the set of terms $t_1, 1 \leq i \leq n$.&lt;/p&gt;

&lt;p&gt;Induction Step: $F$ is not an atomic formula. Then $F$ must be constructed from one or two formulas $F_1, F_2$ using a propositional connective or a quantifier. Assume that we have determined the set of free variables of $F_1$ and $F_2$. The set of free variables of $F$ are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$F = \neg F_1$. Then $free(F) = free(F_1)$.&lt;/li&gt;
  &lt;li&gt;Connected using other propositonal connectives, then $free(F) = free(F_1) \cup free(F_2)$.&lt;/li&gt;
  &lt;li&gt;$F = \exists x F_1$ or $F = \forall x F_1$. Then $free(F) = free(F_1) - \{x\}$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: An occurrence of variable $x$ is free in $F$ iff it does not occur within a subformula of $F$ of the form $\forall x E$ or $\exists x E$.&lt;/p&gt;

&lt;p&gt;If a formula $F$ has no free variables, then it is called a sentence.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If we write out the tree representation, occurrence of variable $x$ is only free if the path to the root contains no $\forall x$ or $\exists x$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;predicate-logic-semantics&quot;&gt;Predicate Logic Semantics&lt;/h2&gt;

&lt;p&gt;For propositional logic, we cannot determine the truth value of a formula unless we did truth assignment. However it is more complicated for predicate logic (first-order formulas).&lt;/p&gt;

&lt;p&gt;Note that if we are just given a first-order formula, it doesn’t really have a meaning. For example $\exists y (A(x,y) \wedge B(c, y) \wedge C(y))$ where $c$ is a constant.&lt;/p&gt;

&lt;p&gt;We must know the domain, meaning of each predicate and the contant to parse the meaning of this formula.&lt;/p&gt;

&lt;h3 id=&quot;structures-valuations-and-interpretations&quot;&gt;Structures, Valuations and Interpretations&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Let $L$ be a first-order language. A structure $S$ for $L$ contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A nonempty set $D$, called the domain of $S$.&lt;/li&gt;
  &lt;li&gt;For each n-ary predicate symbol $A$ of $L$, an n-ary relation $A^S \subseteq D \times … \times D$.&lt;/li&gt;
  &lt;li&gt;For each constant symbol $c$ of $L$, an element $c^S \in D$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Given a structure $S$ for $L$, a valuation of $S$ is a function that maps each variable of $L$ to some element of the structure’s domain $D$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: An interpretation $I$ of $L$ is a pair $(S, e)$, where $S$ is the structure and $e$ is the valuation.&lt;/p&gt;

&lt;h3 id=&quot;truth-value-of-a-formula&quot;&gt;Truth Value of a Formula&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Let $L$ be a first-order language and $S$ be a structure for $L$. The truth value of a formula $F$ in $L$ in interpretation $I = (S, e)$, for any valuation $e$ of $S$ is defined as follows.&lt;/p&gt;

&lt;p&gt;Basis: $F$ is an atomic formula, say $F = A(t_1, …., t_n)$, where $A$ is an n-ary predicate symbol of $L$ and each $t_i$ is a term of $L$. In this case, $F$ is true in $(S, e)$ if $(t^I_i,… t^I_n) \in A^S$ and is false otherwise.&lt;/p&gt;

&lt;p&gt;Induction Step: $F$ is not an atomic formula. Then $F$ is constructed from one or two formulas $F_1, F_2$, using propositional connective or a quantifier. Assume, by induction, that we have determined the truth value for $F_1$ and $F_2$.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$F = \neg F_1$ - $F$ is true if $F_1$ is false in $I$, false otherwise.&lt;/li&gt;
  &lt;li&gt;$F = (F_1 \wedge F_2)$ - $F$ is true if $F_1$ and $F_2$ are both true in $I$, false otherwise.&lt;/li&gt;
  &lt;li&gt;$F = (F_1 \vee F_2)$ - $F$ is true if at $F_1$ or $F_2$ is true in $I$, false otherwise.&lt;/li&gt;
  &lt;li&gt;$F = (F_1 \to F_2)$ - $F$ is false if $F_1$ is true and $F_2$ is false, true otherwise.&lt;/li&gt;
  &lt;li&gt;$F = (F_1 \iff F_2)$ - $F$ is true if $F_1$ and $F_2$ have the same truth value in $I$, false otherwise.&lt;/li&gt;
  &lt;li&gt;$F = \forall x F_1$ - $F$ is true if $F_1$ is true in $(S, e|^x_v)$ for all $v$ in domain, false otherwise.&lt;/li&gt;
  &lt;li&gt;$F = \exists x F_1$ - $F$ is true in $(S, e|^x_v)$ for some $v$ in domain, false otherwise.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Variables not free in a formula does not affect its truth value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;validity-and-satisfiability&quot;&gt;Validity and Satisfiability&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: Let $F$ be a formula of the first-order language $L$. $F$ is&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;valid iff it is satisfied by every interpretation of $L$;&lt;/li&gt;
  &lt;li&gt;satisfiable iff it is satisfied by some interpretation of $L$; and&lt;/li&gt;
  &lt;li&gt;unsatisfiable iff it is not satisfied by any interpretation of $L$.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;logical-implication-and-logical-equivalence&quot;&gt;Logical Implication and Logical Equivalence&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: A formula $F$ logically implies formula $F’$ iff every interpretation that satisfies $F$ also satisfied $F’$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: A formula $F$ is logically equivalent to formula $F’$ iff each interpretation either satisfies both or falsifies both.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorm&lt;/strong&gt;: Note that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$F$ logically implies $F’$ iff $F \to F’$ is valid.&lt;/li&gt;
  &lt;li&gt;$F$ is logically equivalent to $F’$ iff $F \iff F’$ is valid.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;important-logical-equivalences&quot;&gt;Important Logical Equivalences&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;$\neg \forall x F \equiv \exists x \neg F$&lt;/li&gt;
  &lt;li&gt;$\neg \exists x F \equiv \forall x \neg F$&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;$Q$ is just generic quantifier, $Q’$ is the other one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;$E \wedge QxF \equiv Qx(E \wedge F)$, for any formulas $E, F$ and any variable $x$ that is not free in $E$.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$E \vee QxF \equiv Qx(E \vee F)$, for any formulas $E, F$ and any variable $x$ that is not free in $E$.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;$QxE \to F \equiv Q’x(E \to F)$, for any formulas $E, F$ and any variable $x$ that is not free in $F$.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;For all other connectives, you can also do similar things, but do not change $Q$ to $Q’$.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="cscb36" /><category term="cscb36" /><category term="course-notes" /><summary type="html">Notes taken for CSCB36 course at UofT, this post is for Chapter 6, Predicate Logic.</summary></entry><entry><title type="html">CSCB36 Theory of Computation - Chapter 5 Propositional Logic</title><link href="https://jackzh.com/cscb36/2018/12/04/cscb36-chapter-5.html" rel="alternate" type="text/html" title="CSCB36 Theory of Computation - Chapter 5 Propositional Logic" /><published>2018-12-04T00:00:00-05:00</published><updated>2018-12-04T00:00:00-05:00</updated><id>https://jackzh.com/cscb36/2018/12/04/cscb36-chapter-5</id><content type="html" xml:base="https://jackzh.com/cscb36/2018/12/04/cscb36-chapter-5.html">&lt;p&gt;Notes taken for CSCB36 course at UofT, this post is for Chapter 5, Propositional Logic.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;propositional-formulas&quot;&gt;Propositional Formulas&lt;/h2&gt;

&lt;p&gt;Let $PV$ be a set of propositional variables. The set of propositional formulas, denoted $F_{PV}$ is the smallest set such that:&lt;/p&gt;

&lt;p&gt;Basis: Any propositional variable in $PV$ belongs to $F_{PV}$.&lt;/p&gt;

&lt;p&gt;Induction Step: If $P_1$ and $P_2$ belong to $F_{PV}$ then so do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$\neg P_1$&lt;/li&gt;
  &lt;li&gt;$P_1 \wedge P_2$&lt;/li&gt;
  &lt;li&gt;$P_1 \vee P_2$&lt;/li&gt;
  &lt;li&gt;$P_1 \to P_2$&lt;/li&gt;
  &lt;li&gt;$P_1 \iff P_2$&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: $\neg$ is called unary connective, since it is applied to one subformula, others are called binary connectives.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tree-representation-of-f_pv&quot;&gt;Tree Representation of $F_{PV}$&lt;/h3&gt;

&lt;p&gt;Propositional formulas can be nicely drawn using trees.&lt;/p&gt;

&lt;p&gt;For example, the formula $(a \vee b) \wedge \neg c$ can be drawn as&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.evernote.com/l/Aq2DY6PnR7hE5YEXbjpYhMppeUPxTWE4VvQB/image.png&quot; alt=&quot;Tree&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;truth-assignment&quot;&gt;Truth Assignment&lt;/h2&gt;

&lt;p&gt;Let $PV$ be a set of propositional variables. A truth assignment is a function $r: PV \to \{0, 1\}$.&lt;/p&gt;

&lt;p&gt;A truth assignment tells us, for each propositional variable, whether it represents a proposition that is true or false.&lt;/p&gt;

&lt;h2 id=&quot;extended-truth-assignment&quot;&gt;Extended Truth Assignment&lt;/h2&gt;

&lt;p&gt;Extended truth assignment can be used to assign a truth value to any propositional formula, given that you have $r$.&lt;/p&gt;

&lt;p&gt;Let $r: PV \to \{0,1\}$. Define a function $r^*:F_{PV} \to \{0,1\}$ so it is the smallest set such that:&lt;/p&gt;

&lt;p&gt;Basis: $P \in PV$. In this case, $r^*(P) = r(P)$.&lt;/p&gt;

&lt;p&gt;Induction step: $P \notin PV$. Then there are $Q_1, Q_2 \in F_{PV}$ such that $P$ is one of the following formula: $\neg Q_1$, $(Q_1 \wedge Q_2)$, $(Q_1 \vee Q_2)$, $(Q_1 \to Q_2)$, and $(Q_1 \iff Q_2)$.&lt;/p&gt;

&lt;p&gt;By induction, we can assume $r^*(Q_1)$ and $r^*(Q_2)$ are already known.&lt;/p&gt;

&lt;p&gt;The function for all 5 cases are ignored since they should be trivial to figure out.&lt;/p&gt;

&lt;p&gt;If $r^*(P) = 0$ then we say $r$ falsifies $P$, otherwise it satisfies $P$.&lt;/p&gt;

&lt;h2 id=&quot;some-notes-on-logical-connectives&quot;&gt;Some Notes on Logical Connectives&lt;/h2&gt;

&lt;h3 id=&quot;inclusive--exclusive-or&quot;&gt;Inclusive / Exclusive OR&lt;/h3&gt;

&lt;p&gt;When OR is inclusive, that means if $A$ and $B$ are both true, then the whole statement is still true.&lt;/p&gt;

&lt;p&gt;When it is exclusive, it means if $A$ and $B$ are both true, then the statement is false.&lt;/p&gt;

&lt;p&gt;In formal math, we always use inclusive or, we have a special connective for exclusive or, namely xor.&lt;/p&gt;

&lt;h2 id=&quot;unique-readability-theorem&quot;&gt;Unique Readability Theorem&lt;/h2&gt;

&lt;p&gt;For any propositional formulas $P_1, P_2, Q_1, Q_2$ and binary connectives $+$ and $-$. If $(P_1 + P_2) = (Q_1 - Q_2)$ then $P_1 = Q_1$, $+ = -$ and $P_2 = Q_2$.&lt;/p&gt;

&lt;p&gt;This theroem basically states, there is only one way to construct a formula. However, if we omit the parentheses this is not going to be true anymore.&lt;/p&gt;

&lt;p&gt;Even use of parentheses is nice, but usually they are not necessary, so we use some conventions.&lt;/p&gt;

&lt;h3 id=&quot;conventions-to-omit-parentheses&quot;&gt;Conventions to Omit Parentheses&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There is no need to write outmost parentheses, say $(a \wedge b)$ is the same as $a \wedge b$.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$\wedge$ and $\vee$ have precedence over $\to$ and $\iff$.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$\wedge$ has precedence over $\vee$.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Grouping is assumed to be to the right, $a \to b \to c$ is the same as $a \to (b \to c)$&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;truth-tables&quot;&gt;Truth Tables&lt;/h2&gt;

&lt;p&gt;A truth table of $P$ tells us the truth value of $P$ under all possible truth assignments.&lt;/p&gt;

&lt;p&gt;For example, $x \vee y \to \neg x \wedge z$, the truth table is going to be:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.evernote.com/l/Aq0DNUDHAlpOW5DOxvSrddvXRNa2T8VFCLgB/image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tautologies-and-satisfiability&quot;&gt;Tautologies and Satisfiability&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;$P$ is a tautology iff every truth assignment satisfies $P$.&lt;/li&gt;
  &lt;li&gt;$P$ is satisfiable iff there is a truth assignment that satisfied $P$.&lt;/li&gt;
  &lt;li&gt;$P$ is unsatisfiable iff it is not satisfiable. In another word, $\neg P$ is a tautology.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;logical-implication&quot;&gt;Logical Implication&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: A propositional formula $P$ logically implies propositional formula $Q$ if and only if every truth assignment that satisfies $P$ also satisfies $Q$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: $P$ logically implies $Q$ iff $P \to Q$ is a tautology.&lt;/p&gt;

&lt;h2 id=&quot;logical-equivalence&quot;&gt;Logical Equivalence&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: $P$ is logically equivalent to $Q$ iff $P$ logically implis $Q$ and $Q$ logically implies $P$.&lt;/p&gt;

&lt;p&gt;Properties of logical equivalence:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reflexivity: $P$ is logically equivalent to $P$.&lt;/li&gt;
  &lt;li&gt;Symmetry: If $P$ is logically equivalent to $Q$ and $Q$ is logically equivalent to $P$.&lt;/li&gt;
  &lt;li&gt;Transitivity: If $P$ is logically equivalent to $Q$, and $Q$ is logically equivalent to $R$, then $P$ is logically equivalent to $R$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: $P$ is logically equivalent to $Q$ iff $P \iff Q$ is a tautology.&lt;/p&gt;

&lt;h2 id=&quot;important-equivalence-laws&quot;&gt;Important Equivalence Laws&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;$\neg \neg P \equiv P$&lt;/li&gt;
  &lt;li&gt;$\neg (P \wedge Q) \equiv \neg P \vee \neg Q$&lt;/li&gt;
  &lt;li&gt;$\neg (P \vee Q) \equiv \neg P \wedge \neg Q$&lt;/li&gt;
  &lt;li&gt;$P \wedge Q \equiv Q \wedge P$&lt;/li&gt;
  &lt;li&gt;$P \vee Q \equiv Q \vee P$&lt;/li&gt;
  &lt;li&gt;$P \wedge (Q \wedge R) \equiv (P \wedge Q) \wedge R$&lt;/li&gt;
  &lt;li&gt;$P \vee (Q \vee R) \equiv (P \vee Q) \vee R$&lt;/li&gt;
  &lt;li&gt;$P \wedge (Q \vee R) \equiv (P \wedge Q) \vee (P \wedge R)$&lt;/li&gt;
  &lt;li&gt;$P \vee (Q \wedge R) \equiv (P \vee Q) \wedge (P \vee R)$&lt;/li&gt;
  &lt;li&gt;$P \wedge (Q \vee \neg Q) \equiv P$&lt;/li&gt;
  &lt;li&gt;$P \vee (Q \wedge \neg Q) \equiv P$&lt;/li&gt;
  &lt;li&gt;$P \wedge P \equiv P$&lt;/li&gt;
  &lt;li&gt;$P \vee P \equiv P$&lt;/li&gt;
  &lt;li&gt;$P \to Q \equiv \neg P \vee Q$&lt;/li&gt;
  &lt;li&gt;$P \to Q \equiv \neg Q \to \neg P$&lt;/li&gt;
  &lt;li&gt;$P \iff Q \equiv P \wedge Q \vee \neg P \wedge \neg Q$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: Let $R$ be any propositional formula, $S$ be any subformula of $R$, $S’$ be any formula that is logically equivalent to $S$, and $R’$ be the formula that results from $R$ by replacing $S$ with $S’$. Then $R’$ is logically equivalent to $R$.&lt;/p&gt;

&lt;h2 id=&quot;normal-forms-of-propositional-formulas&quot;&gt;Normal Forms of Propositional Formulas&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Literal - Only have one propositional variable or the negation of that variable.&lt;/li&gt;
  &lt;li&gt;Minterm - Is a literal, or a conjuction of two or more literals.&lt;/li&gt;
  &lt;li&gt;Maxterm - Is a literal, or a disjunction of two or more literals.&lt;/li&gt;
  &lt;li&gt;Disjunctive Normal Form - Is minterm, or a disjunction of two or more minterms.&lt;/li&gt;
  &lt;li&gt;Conjunctive Normal Form - Is maxterm, or a conjunction of two or more maxterms.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;They talked about circuit design, already took B58 which covers way more details, not going to take notes here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;complete-sets-of-connectives&quot;&gt;Complete Sets of Connectives&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;: A set of connectives is complete iff every boolean function can be represented by a propositional formula that uses only connectives from that set.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: $\{\neg, \wedge, \vee\}$ is a complete set of connectives.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: $\{\neg, \wedge\}$ is a complete set of connectives.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: $\{\neg, \vee\}$ is a complete set of connectives.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: $\{|\}$ is a complete set of connectives (NAND).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: $\{\downarrow\}$ is a complete set of connectives (NOR).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$\oplus$ is exclusive or.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="cscb36" /><category term="cscb36" /><category term="course-notes" /><summary type="html">Notes taken for CSCB36 course at UofT, this post is for Chapter 5, Propositional Logic.</summary></entry><entry><title type="html">CSCB36 Theory of Computation - Chapter 0</title><link href="https://jackzh.com/cscb36/2018/12/03/cscb36-chapter-0.html" rel="alternate" type="text/html" title="CSCB36 Theory of Computation - Chapter 0" /><published>2018-12-03T00:00:00-05:00</published><updated>2018-12-03T00:00:00-05:00</updated><id>https://jackzh.com/cscb36/2018/12/03/cscb36-chapter-0</id><content type="html" xml:base="https://jackzh.com/cscb36/2018/12/03/cscb36-chapter-0.html">&lt;p&gt;Notes taken for CSCB36 course at UofT, this post is for Chapter 0, mainly talks about sets and fundamental mathematical units.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;sets&quot;&gt;Sets&lt;/h2&gt;

&lt;p&gt;If an object is $a$ in $A$, then we write $a \in A$, if not, we write $a \notin A$.&lt;/p&gt;

&lt;p&gt;If a set has 0 elements, we call that an &lt;em&gt;empty set&lt;/em&gt;, or $\emptyset$.&lt;/p&gt;

&lt;p&gt;Number of elements within a set $A$ is called its size or cardinality, denoted by $|A|$.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For infinite set $A$, $|A| = \infty$&lt;/li&gt;
  &lt;li&gt;For empty set $\emptyset$, $|\emptyset| = 0$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;describing-sets&quot;&gt;Describing Sets&lt;/h3&gt;

&lt;p&gt;There are 2 ways to describe sets.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Extensional: List all elements within a set. For example $\{1,2,3\}$.&lt;/li&gt;
  &lt;li&gt;Intensional: Describle the set with format $\{x: \text{x is odd number}\}$.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;relationship-between-sets&quot;&gt;Relationship Between Sets&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;$A \subseteq B$: If every element in $A$ is also in $B$, then $A$ is a subset of $B$.&lt;/li&gt;
  &lt;li&gt;$B \supseteq A$: If $A \subseteq B$ then this holds.&lt;/li&gt;
  &lt;li&gt;$A \subseteq B$ and $B \subseteq A$ then $A = B$.&lt;/li&gt;
  &lt;li&gt;$A \subseteq B$ and $A \neq B$ then $A$ is a proper subset of $B$, or $A \subset B$.&lt;/li&gt;
  &lt;li&gt;$B \supset A$ if $A \subset B$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interesting properties:&lt;/p&gt;

&lt;p&gt;$\emptyset \subseteq A$ for all set $A$.&lt;/p&gt;

&lt;p&gt;$\emptyset \subset A$ for all set $A \neq \emptyset$.&lt;/p&gt;

&lt;h3 id=&quot;set-operations&quot;&gt;Set Operations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Union of $A$ and $B$ or $A \cup B$, is the set of elements that belongs to $A$ or $B$.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Intersection of $A$ and $B$ or $A \cap B$, is the set of element that belongs to $A$ and $B$. If $A \cap B = \emptyset$, then $A$ and $B$ are disjoint.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Difference of $A$ and $B$ or $A - B$, is the set of elements that belong to $A$ but not to $B$.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;arbitrary-number-of-operations&quot;&gt;Arbitrary Number of Operations&lt;/h4&gt;</content><author><name></name></author><category term="cscb36" /><category term="cscb36" /><category term="course-notes" /><summary type="html">Notes taken for CSCB36 course at UofT, this post is for Chapter 0, mainly talks about sets and fundamental mathematical units.</summary></entry></feed>